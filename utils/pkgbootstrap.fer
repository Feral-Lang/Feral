let io = import('std/io');
let fs = import('std/fs');
let os = import('std/os');
let vec = import('std/vec');
let logging = import('std/logging');

let pkgVersion = '0.0.1';

let pkgExePath = fs.pathFrom(feral.installPath, 'bin', 'pkg.fer');

let logFileName = fs.pathFrom(feral.tempPath, 'feralPkgBootstrap.log');
logging.addTargetByName(logFileName, logging.Levels.TRACE, false);

logging.trace('Checking if path exists: ', pkgExePath);
if fs.exists(pkgExePath) {
	logging.info('Feral pkg already exists in: ', pkgExePath, '; Use `feral pkg` to manage packages');
	io.println('Feral pkg already exists in: ', pkgExePath, '; Use `feral pkg` to manage packages');
	feral.exit(0);
}

io.println('Bootstrapping Feral package manager ...');

let cmd = '';
let cmdOutLines = vec.new();
inline if os.name == 'windows' {
let gitCmd = os.findExec('git.exe');
} else {
let gitCmd = os.findExec('git');
}
if gitCmd.empty() {
	logging.fatal('Failed to find git.');
	raise('Failed to find git. Please make sure it is installed and available in one of the PATHs');
}

# Download and Install Feral's Pkg

# Download Pkg
let pkgRepo = fs.pathFrom(feral.tempPath, 'Pkg');
cmd = gitCmd;
if fs.dirExists(pkgRepo) {
	fs.remove(pkgRepo);
}
cmd += ' clone --depth=1 https://github.com/Feral-Lang/Pkg --branch ';
cmd += pkgVersion + ' ';
cmd += pkgRepo;
cmd += ' 2>&1';
logging.info('Fetching git repository for Pkg: ', cmd);
io.println('Downloading Pkg ...');
cmdOutLines.clear();
if os.exec(cmd, cmdOutLines) != 0 || cmdOutLines.empty() {
	raise('Failed to fetch Pkg git repository');
}
for line in cmdOutLines.each() {
	logging.trace('-- ', line);
}
logging.info('Git repository successfully retrieved');

# Install Pkg

logging.info('Copying files ...');
let pkgInstallPath = fs.pathFrom(feral.installPath, 'lib', 'pkg', 'installed', 'Pkg', 'current');
logging.info('Installing Pkg to: ', pkgInstallPath);
io.println('Installing Pkg to: ', pkgInstallPath);
if !fs.dirExists(pkgInstallPath) { fs.mkdir(pkgInstallPath); }
# Copy stuff
let srcBinPath = fs.pathFrom(pkgRepo, 'bin');
let srcIncPath = fs.pathFrom(pkgRepo, 'include');
let destBinPath = fs.pathFrom(pkgInstallPath, 'bin');
let destIncPath = fs.pathFrom(pkgInstallPath, 'pkg');
logging.trace('-- ', srcBinPath, ' -> ', destBinPath);
fs.copy(srcBinPath, destBinPath);
logging.trace('-- ', srcIncPath, ' -> ', destIncPath);
fs.copy(srcIncPath, destIncPath);
# Don't setup configs - let pkg itself take care of that when it's run for the first time.
# Create the binary hook
let binaryHookPath = fs.pathFrom(feral.installPath, 'bin', 'pkg.fer');
logging.trace('Generating binary hook: ', binaryHookPath);
let binaryHookDataTemplate =
`let pkg = import('pkg/pkg');
pkg.addModuleFinderPaths('{pkgInstallPath}');
import('{pkgInstallPath}/bin/pkg');`;
{
	let binaryHookFile = fs.fopen(binaryHookPath, 'w+');
	io.fprintln(binaryHookFile, binaryHookDataTemplate.fmt());
}
logging.trace('Adding Pkg path to the global module paths file ...');
feral.addGlobalModulePaths(pkgInstallPath);
logging.info('Successfully installed Pkg!');

io.println('Pkg bootstrap completed successfully! Use `feral pkg` to get started with the Feral package manager!');