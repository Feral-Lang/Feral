let io = import('std/io');
let fs = import('std/fs');
let os = import('std/os');
let vec = import('std/vec');
let logging = import('std/logging');

let pkgRepo = 'https://github.com/Feral-Lang/Pkg';
let pkgVersion = '0.0.4';

let pkgExePath = fs.pathFrom(feral.installPath, 'bin', 'pkg.fer');

if !fs.exists(feral.tempPath) { fs.mkdir(feral.tempPath); }

let logFileName = fs.pathFrom(feral.tempPath, 'feralPkgBootstrap.log');
logging.addTargetByName(logFileName, logging.Levels.TRACE, false);
io.println('Writing full logs to: ', logFileName);

logging.trace('Checking if path exists: ', pkgExePath);
if fs.exists(pkgExePath) && !feral.args.find('--force') {
    logging.info('Feral pkg already exists in: ', pkgExePath, '; Use `feral pkg` to manage packages');
    io.println('Feral pkg already exists in: ', pkgExePath, '; Use `feral pkg` to manage packages');
    feral.exit(0);
}

io.println('Bootstrapping Feral package manager ...');

let cmd = vec.new(refs = true);
let cmdOutLines = vec.new(refs = true);
inline if os.name == 'windows' {
let gitCmd = os.findExec('git.exe');
} else {
let gitCmd = os.findExec('git');
}
if gitCmd == nil {
    logging.fatal('Failed to find git.');
    raise('Failed to find git. Please make sure it is installed and available in one of the PATHs');
}

# Download and Install Feral's Pkg

# Download Pkg
let pkgRepoPath = fs.pathFrom(feral.tempPath, 'Pkg');
if fs.dirExists(pkgRepoPath) {
    fs.remove(pkgRepoPath);
}
cmd.push(gitCmd, 'clone', '--depth=1', pkgRepo, '--branch', pkgVersion, pkgRepoPath, '^2>&1');
logging.info('Fetching git repository for Pkg: ', cmd);
io.println('Downloading Pkg ...');
cmdOutLines.clear();
let ec = os.exec(cmd, out = cmdOutLines);
for line in cmdOutLines.each() {
    logging.trace('-- ', line);
}
if ec != 0 || cmdOutLines.empty() {
    raise('Failed to fetch Pkg git repository');
}
logging.info('Git repository successfully retrieved');

# Install Pkg

let pkgBasePath = fs.pathFrom(feral.installPath, 'lib', 'feral', 'pkg');
if fs.dirExists(pkgBasePath) { fs.remove(pkgBasePath); }

let pkgInstallPath = fs.pathFrom(pkgBasePath, 'installed', 'Pkg', pkgVersion);

logging.info('Installing Pkg to: ', pkgInstallPath);
io.println('Installing Pkg to: ', pkgInstallPath);
fs.mkdir(pkgInstallPath);
# Copy stuff
let srcBinPath = fs.pathFrom(pkgRepoPath, 'bin');
let srcIncPath = fs.pathFrom(pkgRepoPath, 'include');
let destBinPath = fs.pathFrom(pkgInstallPath, 'bin');
let destIncPath = fs.pathFrom(pkgInstallPath, 'pkg');
logging.info('Copying files ...');
logging.trace('-- ', srcBinPath, ' -> ', destBinPath);
fs.copy(srcBinPath, destBinPath);
logging.trace('-- ', srcIncPath, ' -> ', destIncPath);
fs.copy(srcIncPath, destIncPath);
# Don't setup configs - let pkg itself take care of that when it's run for the first time.
# Create the binary hook
let pkgBinaryPath = fs.pathFrom(destBinPath, 'pkg.fer');
let pkgBinaryLinkPath = fs.pathFrom(feral.installPath, 'bin', 'pkg.fer');
logging.trace('Generating symlink for binary: ', pkgBinaryPath, ' -> ', pkgBinaryLinkPath);
fs.mklink(pkgBinaryPath, pkgBinaryLinkPath);
logging.trace('Adding Pkg path to the global module paths file ...');
feral.addGlobalModulePaths(pkgInstallPath);
logging.trace('Removing Pkg download path ...');
fs.remove(pkgRepoPath);
logging.info('Successfully installed Pkg!');

io.println('Pkg bootstrap completed successfully! Use `feral pkg` to get started with the Feral package manager!');
