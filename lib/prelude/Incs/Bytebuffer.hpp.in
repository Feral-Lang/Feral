Var *bytebufferNewNative(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
			 const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) {
		vm.fail(
		loc, "expected int argument for bytebuffer size, found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	return vm.makeVar<VarBytebuffer>(loc, as<VarInt>(args[1])->getVal());
}

Var *bytebufferCapacity(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
			const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarBytebuffer>(args[0])->capacity());
}

Var *bytebufferLen(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
		   const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarBytebuffer>(args[0])->getLen());
}

Var *bytebufferToStr(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
		     const StringMap<AssnArgData> &assn_args)
{
	VarBytebuffer *self = as<VarBytebuffer>(args[0]);
	if(self->capacity() == 0) return vm.makeVar<VarStr>(loc, "");
	return vm.makeVar<VarStr>(loc, self->getBuf(), self->getLen());
}