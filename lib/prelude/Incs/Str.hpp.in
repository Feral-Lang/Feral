Var *strAdd(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
            const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc,
                "expected string/char argument"
                " for string addition, found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    VarStr *res = vm.makeVar<VarStr>(loc, as<VarStr>(args[0])->getVal());
    res->getVal() += as<VarStr>(args[1])->getVal();
    return res;
}

Var *strMul(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
            const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected integer argument for string multiplication, found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef lhs = as<VarStr>(args[0])->getVal();
    int64_t rhs   = as<VarInt>(args[1])->getVal();
    VarStr *res   = vm.makeVar<VarStr>(loc, "");
    for(int64_t i = 1; i < rhs; ++i) {
        res->getVal() += lhs;
    }
    return res;
}

Var *strAddAssn(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected string argument for addition assignment, found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    VarStr *res = as<VarStr>(args[0]);
    res->getVal() += as<VarStr>(args[1])->getVal();
    return args[0];
}

Var *strMulAssn(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected integer argument for string multiplication assignment, found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    String lhs  = as<VarStr>(args[0])->getVal();
    int64_t rhs = as<VarInt>(args[1])->getVal();
    for(int64_t i = 1; i < rhs; ++i) {
        as<VarStr>(args[0])->getVal() += lhs;
    }
    return args[0];
}

// logical functions

Var *strLT(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc,
                "expected string/stringref argument for '<', found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs < rhs ? vm.getTrue() : vm.getFalse();
}

Var *strGT(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected string argument for '>', found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs > rhs ? vm.getTrue() : vm.getFalse();
}

Var *strLE(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected string argument for '<=', found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs <= rhs ? vm.getTrue() : vm.getFalse();
}

Var *strGE(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected string argument for '>=', found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs >= rhs ? vm.getTrue() : vm.getFalse();
}

Var *strEq(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) return vm.getFalse();
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs == rhs ? vm.getTrue() : vm.getFalse();
}

Var *strNe(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) return vm.getTrue();
    StringRef lhs = as<VarStr>(args[0])->getVal();
    StringRef rhs = as<VarStr>(args[1])->getVal();
    return lhs != rhs ? vm.getTrue() : vm.getFalse();
}

Var *strAt(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
           const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected argument to be of type integer for string.at(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    StringRef str = as<VarStr>(args[0])->getVal();
    size_t pos    = as<VarInt>(args[1])->getVal();
    if(pos >= str.size()) return vm.getNil();
    return vm.makeVar<VarStr>(loc, str[pos]);
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// Utility /////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

Vector<Var *> _strSplit(VirtualMachine &vm, ModuleLoc loc, StringRef data, StringRef delim,
                        int64_t maxDelimCount);

static inline void trim(String &s);

size_t sizePow(size_t base, int exp);
size_t strToBin(StringRef str);

Var *strSize(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    return vm.makeVar<VarInt>(loc, as<VarStr>(args[0])->getVal().size());
}

Var *strClear(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    as<VarStr>(args[0])->getVal().clear();
    return vm.getNil();
}

Var *strEmpty(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    return as<VarStr>(args[0])->getVal().size() == 0 ? vm.getTrue() : vm.getFalse();
}

Var *strFront(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    const String &str = as<VarStr>(args[0])->getVal();
    return str.size() == 0 ? (Var *)vm.getNil() : (Var *)vm.makeVar<VarStr>(loc, str.front());
}

Var *strBack(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    String &str = as<VarStr>(args[0])->getVal();
    return str.size() == 0 ? (Var *)vm.getNil() : (Var *)vm.makeVar<VarStr>(loc, str.back());
}

Var *strPush(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc,
                "expected string argument for string.push(), found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    String &src  = as<VarStr>(args[1])->getVal();
    String &dest = as<VarStr>(args[0])->getVal();
    if(src.size() > 0) dest += src;
    return args[0];
}

Var *strPop(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
            const StringMap<AssnArgData> &assn_args)
{
    String &str = as<VarStr>(args[0])->getVal();
    if(str.size() > 0) str.pop_back();
    return args[0];
}

Var *strIsChAt(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
               const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected first argument to be of type integer for index, found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    if(!args[2]->is<VarStr>() && !args[2]->is<VarInt>()) {
        vm.fail(loc,
                "expected second argument to be of type "
                "string or integer for checking, found: ",
                vm.getTypeName(args[2]));
        return nullptr;
    }
    size_t pos   = as<VarInt>(args[1])->getVal();
    String &dest = as<VarStr>(args[0])->getVal();
    if(pos >= dest.size()) return vm.getFalse();
    String chars;
    if(args[2]->is<VarInt>()) {
        chars = as<VarInt>(args[2])->getVal();
    } else if(args[2]->is<VarStr>()) {
        chars = as<VarStr>(args[2])->getVal();
    }
    return chars.find(dest[pos]) == String::npos ? vm.getFalse() : vm.getTrue();
}

Var *strSetAt(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected first argument to be of type integer for string.set(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    if(!args[2]->is<VarStr>()) {
        vm.fail(loc, "expected second argument to be of type string for string.set(), found: ",
                vm.getTypeName(args[2]));
        return nullptr;
    }
    size_t pos   = as<VarInt>(args[1])->getVal();
    String &dest = as<VarStr>(args[0])->getVal();
    if(pos >= dest.size()) {
        vm.fail(loc, "position ", pos, " is not within string of length: ", dest.size());
        return nullptr;
    }
    String &src = as<VarStr>(args[2])->getVal();
    if(src.size() == 0) return args[0];
    dest[pos] = src[0];
    return args[0];
}

Var *strInsert(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
               const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc,
                "expected first argument to be of type "
                "integer for string.insert(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    if(!args[2]->is<VarStr>()) {
        vm.fail(loc,
                "expected second argument to be of type "
                "string for string.insert(), found: ",
                vm.getTypeName(args[2]));
        return nullptr;
    }
    size_t pos   = as<VarInt>(args[1])->getVal();
    String &dest = as<VarStr>(args[0])->getVal();
    if(pos > dest.size()) {
        vm.fail(loc, "position ", pos, " is greater than string length: ", dest.size());
        return nullptr;
    }
    String &src = as<VarStr>(args[2])->getVal();
    dest.insert(dest.begin() + pos, src.begin(), src.end());
    return args[0];
}

Var *strErase(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected argument to be of type integer for string.erase(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    size_t pos  = as<VarInt>(args[1])->getVal();
    String &str = as<VarStr>(args[0])->getVal();
    if(pos < str.size()) str.erase(str.begin() + pos);
    return args[0];
}

Var *strFind(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected argument to be of type str for string.find(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    String &str  = as<VarStr>(args[0])->getVal();
    String &what = as<VarStr>(args[1])->getVal();
    size_t pos   = str.find(what);
    if(pos == String::npos) {
        return vm.makeVar<VarInt>(loc, -1);
    }
    return vm.makeVar<VarInt>(loc, pos);
}

Var *strRFind(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected argument to be of type str for string.rfind(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    String &str  = as<VarStr>(args[0])->getVal();
    String &what = as<VarStr>(args[1])->getVal();
    size_t pos   = str.rfind(what);
    if(pos == String::npos) {
        return vm.makeVar<VarInt>(loc, -1);
    }
    return vm.makeVar<VarInt>(loc, pos);
}

Var *strSubstr(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
               const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarInt>()) {
        vm.fail(loc, "expected begin argument to be of type integer for string.substr(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    if(!args[2]->is<VarInt>()) {
        vm.fail(loc,
                "expected length argument to be of type "
                "integer for string.substr(), found: ",
                vm.getTypeName(args[2]));
        return nullptr;
    }
    size_t pos  = as<VarInt>(args[1])->getVal();
    size_t len  = as<VarInt>(args[2])->getVal();
    String &str = as<VarStr>(args[0])->getVal();
    return vm.makeVar<VarStr>(loc, str.substr(pos, len));
}

Var *strLast(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    return vm.makeVar<VarInt>(loc, as<VarStr>(args[0])->getVal().size() - 1);
}

Var *strTrim(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
             const StringMap<AssnArgData> &assn_args)
{
    String &str = as<VarStr>(args[0])->getVal();
    trim(str);
    return args[0];
}

Var *strLower(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    String str = as<VarStr>(args[0])->getVal();
    size_t len = str.size();
    for(size_t i = 0; i < len; ++i) {
        str[i] = str[i] >= 'A' && str[i] <= 'Z' ? str[i] | 0x60 : str[i];
    }
    return vm.makeVar<VarStr>(loc, str);
}

Var *strUpper(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    String str = as<VarStr>(args[0])->getVal();
    size_t len = str.size();
    for(size_t i = 0; i < len; ++i) {
        str[i] = str[i] >= 'a' && str[i] <= 'z' ? str[i] ^ 0x20 : str[i];
    }
    return vm.makeVar<VarStr>(loc, str);
}

Var *strSplit(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
              const StringMap<AssnArgData> &assn_args)
{
    VarStr *str = as<VarStr>(args[0]);
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected string argument for delimiter, found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    if(as<VarStr>(args[1])->getVal().size() == 0) {
        vm.fail(loc, "found empty delimiter for string split");
        return nullptr;
    }
    if(!args[2]->is<VarInt>()) {
        vm.fail(loc, "expected int argument for max delim count, found: ", vm.getTypeName(args[2]));
        return nullptr;
    }
    StringRef delim       = as<VarStr>(args[1])->getVal();
    int64_t maxDelimCount = as<VarInt>(args[2])->getVal();
    if(maxDelimCount < 0) maxDelimCount = std::numeric_limits<int64_t>().max();
    return vm.makeVar<VarVec>(
        loc, std::move(_strSplit(vm, loc, str->getVal(), delim, maxDelimCount)), false);
}

Var *strStartsWith(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                   const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected argument to be of type string for string.starts_with(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    const String &str = as<VarStr>(args[0])->getVal();
    String &with      = as<VarStr>(args[1])->getVal();
    return vm.makeVar<VarBool>(loc, str.rfind(with, 0) == 0);
}

Var *strEndsWith(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                 const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc, "expected argument to be of type string for string.ends_with(), found: ",
                vm.getTypeName(args[1]));
        return nullptr;
    }
    const String &str = as<VarStr>(args[0])->getVal();
    String &with      = as<VarStr>(args[1])->getVal();
    size_t pos        = str.rfind(with);
    return vm.makeVar<VarBool>(loc, pos != String::npos && pos + with.size() == str.size());
}

Var *strFormat(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
               const StringMap<AssnArgData> &assn_args)
{
    String str    = as<VarStr>(args[0])->getVal();
    size_t argctr = 1;
    for(size_t i = 0; i < str.size(); ++i) {
        if(str[i] != '{') continue;
        if(i > 0 && str[i - 1] == '\\') {
            str.erase(str.begin() + i - 1);
            --i;
            continue;
        }
        size_t start = i;
        ++i;
        String expr;
        Var *base = nullptr;
        if(i < str.size() && str[i] == '}') {
            base = args[argctr++];
            vm.incVarRef(base);
        } else {
            while(i < str.size() && str[i] != '}') expr += str[i++];
            if(i == str.size()) {
                vm.fail(loc, "failed to find ending brace for eval expr: ", expr);
                return nullptr;
            }
            base = vm.eval(loc, expr, true);
            if(!base) {
                vm.fail(loc, "failed to evaluate expr: ", expr);
                return nullptr;
            }
        }
        Var *v = nullptr;
        Array<Var *, 1> tmp{base};
        if(!vm.callVarAndExpect<VarStr>(loc, "str", v, tmp, {})) {
            vm.decVarRef(base);
            return nullptr;
        }
        String res = as<VarStr>(v)->getVal();
        vm.decVarRef(v);
        vm.decVarRef(base);
        str.erase(start, expr.size() + 2); // +2 for braces
        str.insert(str.begin() + start, res.begin(), res.end());
        i = start + res.size() - 1; // -1 for loop increment (++i)
    }
    return vm.makeVar<VarStr>(loc, std::move(str));
}

Var *hexStrToBinStr(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                    const StringMap<AssnArgData> &assn_args)
{
    static std::unordered_map<char, const char *> hextobin = {
        {'0', "0000"}, {'1', "0001"}, {'2', "0010"}, {'3', "0011"}, {'4', "0100"}, {'5', "0101"},
        {'6', "0110"}, {'7', "0111"}, {'8', "1000"}, {'9', "1001"}, {'a', "1010"}, {'b', "1011"},
        {'c', "1100"}, {'d', "1101"}, {'e', "1110"}, {'f', "1111"},
    };

    const String &str = as<VarStr>(args[0])->getVal();
    String bin;
    for(auto &ch : str) {
        char c = tolower(ch);
        if((c < '0' || c > '9') && (c < 'a' || c > 'f')) {
            vm.fail(loc, "expected hex string, found character: ", c);
            return nullptr;
        }
        bin += hextobin[c];
    }
    while(!bin.empty() && bin.front() == '0') bin.erase(bin.begin());
    return vm.makeVar<VarStr>(loc, bin);
}

Var *utf8CharFromBinStr(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                        const StringMap<AssnArgData> &assn_args)
{
    String str = as<VarStr>(args[0])->getVal();
    if(str.empty()) return vm.makeVar<VarStr>(loc, "");

    // reference: https://en.wikipedia.org/wiki/UTF-8#Encoding
    if(str.size() > 21) {
        vm.fail(loc, "UTF-8 cannot be more than 21 bytes, found bytes: ", str.size());
        return nullptr;
    }

    for(auto &c : str) {
        if(c == '0' || c == '1') continue;
        vm.fail(loc, "expected bin string, found character: ", c);
        return nullptr;
    }

    VarStr *res = vm.makeVar<VarStr>(loc, "");
    String &r   = as<VarStr>(res)->getVal();
    if(str.size() <= 7) {
        while(str.size() < 7) {
            str.insert(str.begin(), '0');
        }
        str.insert(str.begin(), '0');
        r = strToBin(str);
    } else if(str.size() <= 11) {
        while(str.size() < 11) {
            str.insert(str.begin(), '0');
        }
        r = strToBin("110" + str.substr(0, 5));
        r += strToBin("10" + str.substr(5));
    } else if(str.size() <= 16) {
        while(str.size() < 16) {
            str.insert(str.begin(), '0');
        }
        r = strToBin("1110" + str.substr(0, 4));
        r += strToBin("10" + str.substr(4, 6));
        r += strToBin("10" + str.substr(10));
    } else { // str.size() <= 21
        while(str.size() < 21) {
            str.insert(str.begin(), '0');
        }
        r = strToBin("11110" + str.substr(0, 3));
        r += strToBin("10" + str.substr(3, 6));
        r += strToBin("10" + str.substr(9, 6));
        r += strToBin("10" + str.substr(15));
    }

    return res;
}

// character (str[0]) to its ASCII (int)
Var *byt(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
         const StringMap<AssnArgData> &assn_args)
{
    const String &str = as<VarStr>(args[0])->getVal();
    if(str.empty()) return vm.makeVar<VarInt>(loc, 0);
    return vm.makeVar<VarInt>(loc, (unsigned char)str[0]);
}

// ASCII (int) to character (str)
Var *chr(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
         const StringMap<AssnArgData> &assn_args)
{
    uint8_t byt = (uint8_t)as<VarInt>(args[0])->getVal();
    return vm.makeVar<VarStr>(loc, String(1, byt));
}

Vector<Var *> _strSplit(VirtualMachine &vm, ModuleLoc loc, StringRef data, StringRef delim,
                        int64_t maxDelimCount)
{
    String temp;
    Vector<Var *> vec;
    int64_t delimCount = 0;
    for(auto c : data) {
        if(delim.find(c) != String::npos && delimCount < maxDelimCount) {
            ++delimCount;
            if(temp.empty()) continue;
            vec.push_back(vm.makeVarWithRef<VarStr>(loc, temp));
            temp.clear();
            continue;
        }
        temp += c;
    }
    if(!temp.empty()) vec.push_back(vm.makeVarWithRef<VarStr>(loc, temp));
    return vec;
}

Var *strReplace(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
                const StringMap<AssnArgData> &assn_args)
{
    if(!args[1]->is<VarStr>()) {
        vm.fail(loc,
                "expected str argument for string replace from, found: ", vm.getTypeName(args[1]));
        return nullptr;
    }
    if(!args[2]->is<VarStr>()) {
        vm.fail(loc,
                "expected str argument for string replace to, found: ", vm.getTypeName(args[2]));
        return nullptr;
    }
    StringRef from = as<VarStr>(args[1])->getVal();
    StringRef to   = as<VarStr>(args[2])->getVal();
    String res     = as<VarStr>(args[0])->getVal();
    utils::stringReplace(res, from, to);
    return vm.makeVar<VarStr>(loc, std::move(res));
}

// trim from start (in place)
static inline void ltrim(String &s)
{
    s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](int ch) { return !std::isspace(ch); }));
}

// trim from end (in place)
static inline void rtrim(String &s)
{
    s.erase(std::find_if(s.rbegin(), s.rend(), [](int ch) { return !std::isspace(ch); }).base(),
            s.end());
}

// trim from both ends (in place)
static inline void trim(String &s)
{
    ltrim(s);
    rtrim(s);
}

size_t sizePow(size_t base, int exp)
{
    size_t result = 1;
    while(exp) {
        if(exp % 2) result *= base;
        exp /= 2;
        base *= base;
    }
    return result;
}

size_t strToBin(StringRef str)
{
    size_t exp = sizePow(2, str.size() - 1);
    size_t bin = 0;
    for(auto &c : str) {
        if(c == '1') {
            bin += exp;
        }
        exp /= 2;
    }
    return bin;
}