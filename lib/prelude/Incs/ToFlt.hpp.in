Var *nilToFlt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarFlt>(loc, 0.0);
}

Var *boolToFlt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarFlt>(loc, as<VarBool>(args[0])->getVal() ? 1.0 : 0.0);
}

Var *intToFlt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarFlt>(loc, as<VarInt>(args[0])->getVal());
}

Var *fltToFlt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return args[0];
}

Var *strToFlt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarFlt>(loc, std::stod(as<VarStr>(args[0])->getVal()));
}