Var *nilToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, 0);
}

Var *boolToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarBool>(args[0])->getVal() ? 1 : 0);
}

Var *typeIDToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
		 const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarTypeID>(args[0])->getVal());
}

Var *intToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return args[0];
}

Var *fltToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarFlt>(args[0])->getVal());
}

Var *strToInt(Interpreter &vm, ModuleLoc loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	StringRef num = as<VarStr>(args[0])->getVal();
	for(auto c : num) {
		if(c == '-' || (c >= '0' && c <= '9')) continue;
		vm.fail(loc, "string '", num, "' is not a number");
		return nullptr;
	}
	return vm.makeVar<VarInt>(loc, std::stoll(as<VarStr>(args[0])->getVal()));
}