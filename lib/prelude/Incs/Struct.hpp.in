Var *createStruct(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
		  const StringMap<AssnArgData> &assn_args)
{
	MemoryManager &mem = vm.getMemoryManager();
	VarStructDef *res  = vm.makeVar<VarStructDef>(loc, assn_args.size());
	for(auto &attr : assn_args) {
		res->setAttr(mem, attr.first, attr.second.val, true);
		res->setAttrOrderAt(attr.second.pos, attr.first);
	}
	return res;
}

Var *structToStr(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
		 const StringMap<AssnArgData> &assn_args)
{
	VarStruct *st = as<VarStruct>(args[0]);
	VarStr *res   = vm.makeVar<VarStr>(loc, vm.getTypeName(st->getTypeFnID()));
	res->getVal() += "{";
	for(auto &a : st->getAttrs()) {
		Var *v = nullptr;
		Array<Var *, 1> tmp{a.second};
		if(!vm.callVarAndExpect<VarStr>(loc, "str", v, tmp, {})) {
			vm.unmakeVar(res);
			return nullptr;
		}
		res->getVal() += a.first;
		res->getVal() += ": ";
		res->getVal() += as<VarStr>(v)->getVal();
		vm.decVarRef(v);
		res->getVal() += ", ";
	}
	if(!st->getAttrs().empty()) {
		res->getVal().pop_back();
		res->getVal().pop_back();
	}
	res->getVal() += "}";
	return res;
}

Var *structDefSetTypeName(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
			  const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc,
			"expected typename to be of type string, found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	VarStructDef *def  = as<VarStructDef>(args[0]);
	const String &name = as<VarStr>(args[1])->getVal();
	vm.setTypeName(def->getID(), name);
	return vm.getNil();
}

Var *structDefGetFields(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
			const StringMap<AssnArgData> &assn_args)
{
	VarStructDef *def = as<VarStructDef>(args[0]);
	VarVec *res	  = vm.makeVar<VarVec>(loc, def->getAttrOrder().size(), false);
	for(auto &a : def->getAttrOrder()) {
		res->push(vm.makeVarWithRef<VarStr>(loc, a));
	}
	return res;
}

Var *structDefGetFieldValue(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
			    const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc,
			"expected field name to be "
			"of type string, found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	const String &name = as<VarStr>(args[1])->getVal();
	Var *res	   = as<VarStructDef>(args[0])->getAttr(name);
	return res ? res : vm.getNil();
}

Var *structDefLen(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
		  const StringMap<AssnArgData> &assn_args)
{
	VarStructDef *def = as<VarStructDef>(args[0]);
	return vm.makeVar<VarInt>(loc, def->getAttrCount());
}

Var *structGetFields(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
		     const StringMap<AssnArgData> &assn_args)
{
	VarStruct *st = as<VarStruct>(args[0]);
	VarVec *res   = vm.makeVar<VarVec>(loc, st->getAttrs().size(), false);
	for(auto &a : st->getAttrs()) {
		res->push(vm.makeVarWithRef<VarStr>(loc, a.first));
	}
	return res;
}

Var *structSetFieldValue(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
			 const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(
		loc, "expected field name to be of type string, found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	const String &name = as<VarStr>(args[1])->getVal();

	VarStruct *st = as<VarStruct>(args[0]);
	Var *val      = st->getAttr(name);
	if(!val) {
		vm.fail(loc, "field name: '", name, "' not found in struct");
		return nullptr;
	}

	if(val->getType() != args[2]->getType()) {
		vm.fail(loc, "attribute value type mismatch; expected: '", vm.getTypeName(val),
			"', provided: '", vm.getTypeName(args[2]), "'");
		return nullptr;
	}
	vm.setVar(val, args[2]);
	return vm.getNil();
}

Var *structLen(VirtualMachine &vm, ModuleLoc loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	VarStruct *st = as<VarStruct>(args[0]);
	return vm.makeVar<VarInt>(loc, st->getAttrCount());
}