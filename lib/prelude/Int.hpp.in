#define ARITHI_FUNC(fn, oper)                                                                      \
	Var *int##fn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,                      \
		     const StringMap<AssnArgData> &assn_args)                                      \
	{                                                                                          \
		if(args[1]->is<VarInt>()) {                                                        \
			return vm.makeVar<VarInt>(                                                 \
			loc, as<VarInt>(args[0])->get() oper as<VarInt>(args[1])->get());          \
		} else if(args[1]->is<VarFlt>()) {                                                 \
			return vm.makeVar<VarInt>(                                                 \
			loc, as<VarInt>(args[0])->get() oper(int64_t) as<VarFlt>(args[1])->get()); \
		}                                                                                  \
		vm.fail(loc, "expected int or flt argument for int " STRINGIFY(fn) ", found: ",    \
			vm.getTypeName(args[1]));                                                  \
		return nullptr;                                                                    \
	}

#define ARITHI_ASSN_FUNC(fn, oper)                                                              \
	Var *intAssn##fn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,               \
			 const StringMap<AssnArgData> &assn_args)                               \
	{                                                                                       \
		if(args[1]->is<VarInt>()) {                                                     \
			as<VarInt>(args[0])->set(                                               \
			as<VarInt>(args[0])->get() oper as<VarInt>(args[1])->get());            \
			return args[0];                                                         \
		} else if(args[1]->is<VarFlt>()) {                                              \
			as<VarInt>(args[0])->set(                                               \
			as<VarInt>(args[0])->get() oper(int64_t) as<VarFlt>(args[1])->get());   \
			return args[0];                                                         \
		}                                                                               \
		vm.fail(loc,                                                                    \
			"expected int or flt argument for int " STRINGIFY(fn) "-assn, found: ", \
			vm.getTypeName(args[1]));                                               \
		return nullptr;                                                                 \
	}

#define LOGICI_FUNC(fn, sym)                                                                    \
	Var *int##fn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,                   \
		     const StringMap<AssnArgData> &assn_args)                                   \
	{                                                                                       \
		if(args[1]->is<VarInt>()) {                                                     \
			return as<VarInt>(args[0])->get() sym as<VarInt>(args[1])->get()        \
			       ? vm.getTrue()                                                   \
			       : vm.getFalse();                                                 \
		}                                                                               \
		if(args[1]->is<VarFlt>()) {                                                     \
			return as<VarInt>(args[0])->get() sym as<VarFlt>(args[1])->get()        \
			       ? vm.getTrue()                                                   \
			       : vm.getFalse();                                                 \
		}                                                                               \
		vm.fail(loc, "expected int or flt argument for int " STRINGIFY(fn) ", found: ", \
			vm.getTypeName(args[1]));                                               \
		return nullptr;                                                                 \
	}

#define BITWISE_FUNC(fn, sym)                                                                    \
	Var *intB##fn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,                   \
		      const StringMap<AssnArgData> &assn_args)                                   \
	{                                                                                        \
		if(args[1]->is<VarInt>()) {                                                      \
			return vm.makeVar<VarInt>(                                               \
			loc, as<VarInt>(args[0])->get() sym as<VarInt>(args[1])->get());         \
		}                                                                                \
		vm.fail(loc, "expected int argument for int bitwise " STRINGIFY(fn) ", found: ", \
			vm.getTypeName(args[1]));                                                \
		return nullptr;                                                                  \
	}

#define BITWISE_ASSN_FUNC(fn, sym)                                                  \
	Var *intAssnB##fn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,  \
			  const StringMap<AssnArgData> &assn_args)                  \
	{                                                                           \
		if(args[1]->is<VarInt>()) {                                         \
			as<VarInt>(args[0])->set(                                   \
			as<VarInt>(args[0])->get() sym as<VarInt>(args[1])->get()); \
			return args[0];                                             \
		}                                                                   \
		vm.fail(loc,                                                        \
			"expected int argument for int "                            \
			"bitwise " STRINGIFY(fn) "-assn, found: ",                  \
			vm.getTypeName(args[1]));                                   \
		return nullptr;                                                     \
	}

ARITHI_FUNC(Add, +)
ARITHI_FUNC(Sub, -)
ARITHI_FUNC(Mul, *)
ARITHI_FUNC(Mod, %)

ARITHI_ASSN_FUNC(Add, +)
ARITHI_ASSN_FUNC(Sub, -)
ARITHI_ASSN_FUNC(Mul, *)
ARITHI_ASSN_FUNC(Mod, %)

LOGICI_FUNC(LT, <)
LOGICI_FUNC(GT, >)
LOGICI_FUNC(LE, <=)
LOGICI_FUNC(GE, >=)

BITWISE_FUNC(And, &)
BITWISE_FUNC(Or, |)
BITWISE_FUNC(XOr, ^)

BITWISE_ASSN_FUNC(And, &)
BITWISE_ASSN_FUNC(Or, |)
BITWISE_ASSN_FUNC(XOr, ^)

Var *intEQ(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) return vm.getFalse();
	return as<VarInt>(args[0])->get() == as<VarInt>(args[1])->get() ? vm.getTrue()
									: vm.getFalse();
}

Var *intNE(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) return vm.getTrue();
	return as<VarInt>(args[0])->get() == as<VarInt>(args[1])->get() ? vm.getFalse()
									: vm.getTrue();
}

Var *intDiv(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	    const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		// rhs == 0
		if(as<VarInt>(args[1])->get() == 0) {
			vm.fail(loc, "division by zero");
			return nullptr;
		}
		return vm.makeVar<VarInt>(loc,
					  as<VarInt>(args[0])->get() / as<VarInt>(args[1])->get());
	} else if(args[1]->is<VarFlt>()) {
		// rhs == 0
		if(as<VarFlt>(args[1])->get() == 0.0) {
			vm.fail(loc, "division by zero");
			return nullptr;
		}
		return vm.makeVar<VarInt>(loc,
					  as<VarInt>(args[0])->get() / as<VarInt>(args[1])->get());
	}
	vm.fail(loc, "expected int or flt argument for int Div, found: ", vm.getTypeName(args[1]));
	return nullptr;
}

Var *intAssnDiv(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		// rhs == 0
		if(as<VarInt>(args[1])->get() == 0) {
			vm.fail(loc, "division by zero");
			return nullptr;
		}
		as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() / as<VarInt>(args[1])->get());
		return args[0];
	} else if(args[1]->is<VarFlt>()) {
		// rhs == 0
		if(as<VarFlt>(args[1])->get() == 0.0) {
			vm.fail(loc, "division by zero");
			return nullptr;
		}
		as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() / as<VarFlt>(args[1])->get());
		return args[0];
	}
	vm.fail(loc,
		"expected int or flt argument for int Div-assn, found: ", vm.getTypeName(args[1]));
	return nullptr;
}

Var *intBNot(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	     const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, ~as<VarInt>(args[0])->get());
}

Var *intBNotAssn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		 const StringMap<AssnArgData> &assn_args)
{
	as<VarInt>(args[0])->set(~as<VarInt>(args[0])->get());
	return args[0];
}

Var *intPopCnt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, std::popcount((uint64_t)as<VarInt>(args[0])->get()));
}

Var *intLShift(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		return vm.makeVar<VarInt>(loc, as<VarInt>(args[0])->get()
					       << as<VarInt>(args[1])->get());
	}
	vm.fail(loc,
		"expected int argument "
		"for int leftshift, found: ",
		vm.getTypeName(args[1]));
	return nullptr;
}

Var *intRShift(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		return vm.makeVar<VarInt>(loc,
					  as<VarInt>(args[0])->get() >> as<VarInt>(args[1])->get());
	}
	vm.fail(loc,
		"expected int argument "
		"for int rightshift, found: ",
		vm.getTypeName(args[1]));
	return nullptr;
}

Var *intLShiftAssn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		   const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() << as<VarInt>(args[1])->get());
		return args[0];
	}
	vm.fail(loc,
		"expected int argument for int leftshift-assign, found: ", vm.getTypeName(args[1]));
	return nullptr;
}

Var *intRShiftAssn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		   const StringMap<AssnArgData> &assn_args)
{
	if(args[1]->is<VarInt>()) {
		as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() >> as<VarInt>(args[1])->get());
		return args[0];
	}
	vm.fail(
	loc, "expected int argument for int rightshift-assign, found: ", vm.getTypeName(args[1]));
	return nullptr;
}

Var *intPow(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	    const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) {
		vm.fail(loc,
			"expected int argument for int power, found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	int64_t base = as<VarInt>(args[0])->get();
	int64_t exp  = as<VarInt>(args[1])->get();
	int64_t res  = 1;
	if(exp < 0) {
		vm.fail(loc, "int power only works with positive exponents, found: ", exp);
		return nullptr;
	}
	while(exp-- > 0) res *= base;
	return vm.makeVar<VarInt>(loc, res);
}

Var *intSqRoot(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, std::sqrt(as<VarInt>(args[0])->get()));
}

Var *intPreInc(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() + 1);
	return args[0];
}

Var *intPostInc(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const StringMap<AssnArgData> &assn_args)
{
	VarInt *res = vm.makeVar<VarInt>(loc, as<VarInt>(args[0])->get());
	as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() + 1);
	return res;
}

Var *intPreDec(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const StringMap<AssnArgData> &assn_args)
{
	as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() - 1);
	return args[0];
}

Var *intPostDec(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const StringMap<AssnArgData> &assn_args)
{
	VarInt *res = vm.makeVar<VarInt>(loc, as<VarInt>(args[0])->get());
	as<VarInt>(args[0])->set(as<VarInt>(args[0])->get() - 1);
	return res;
}

Var *intUSub(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	     const StringMap<AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, -as<VarInt>(args[0])->get());
}

Var *intRange(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	      const StringMap<AssnArgData> &assn_args)
{
	Var *lhs_base  = args[1];
	Var *rhs_base  = args.size() > 2 ? args[2] : nullptr;
	Var *step_base = args.size() > 3 ? args[3] : nullptr;

	if(!lhs_base->is<VarInt>()) {
		vm.fail(lhs_base->getLoc(),
			"expected argument 1 to be of type int, found: ", vm.getTypeName(lhs_base));
		return nullptr;
	}
	if(rhs_base && !rhs_base->is<VarInt>()) {
		vm.fail(rhs_base->getLoc(),
			"expected argument 2 to be of type int, found: ", vm.getTypeName(rhs_base));
		return nullptr;
	}
	if(step_base && !step_base->is<VarInt>()) {
		vm.fail(step_base->getLoc(), "expected argument 3 to be of type int, found: ",
			vm.getTypeName(step_base));
		return nullptr;
	}

	int64_t begin, end, step;
	if(args.size() > 2) begin = as<VarInt>(lhs_base)->get();
	else begin = 0;
	if(rhs_base) end = as<VarInt>(rhs_base)->get();
	else end = as<VarInt>(lhs_base)->get();
	if(step_base) step = as<VarInt>(step_base)->get();
	else step = 1;
	VarIntIterator *res = vm.makeVar<VarIntIterator>(loc, begin, end, step);
	return res;
}

Var *getIntIteratorNext(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
			const StringMap<AssnArgData> &assn_args)
{
	VarIntIterator *it = as<VarIntIterator>(args[0]);
	int64_t _res;
	if(!it->next(_res)) return vm.getNil();
	VarInt *res = vm.makeVar<VarInt>(loc, _res);
	res->setLoadAsRef();
	return res;
}