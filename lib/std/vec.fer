mload('std/Vec');

let str = import('std/str');

let '==' in VecTy = fn(other) {
	if self._type_() != other._type_() { return false; }
	if self.len() != other.len() { return false; }
	let len = self.len();
	for let i = 0; i < len; ++i {
		if self[i] != other[i] { return false; }
	}
	return true;
};

# stores in the type - NOT object
let find in VecTy = fn(obj) {
	for data in self.each() {
		if data == obj { return true; }
	}
	return false;
};

# returns true if element is found in the list, else false
let rem in VecTy = fn(obj) {
	let len = self.len();
	for let i = 0; i < len; ++i {
		if self[i] == obj {
			self.erase(i);
			return true;
		}
	}
	return false;
};

let slice in VecTy = fn(start, end = -1) {
	if end == -1 { end = self.len(); }
	return self.sliceNative(start, end);
};

let sub in VecTy = fn(start, end = -1) {
	if end == -1 { end = self.len(); }
	return self.subNative(start, end);
};

let min in VecTy = fn(lt = fn(a, b) { return a < b; }) {
	if self.empty() {
		raise('cannot find min in an empty list');
	}
	let count = self.len();
	let min = 0;
	for let i = 1; i < count; ++i {
		if lt(self[i], self[min]) { min = i; }
	}
	return min;
};

let max in VecTy = fn(gt = fn(a, b) { return a > b; }) {
	if self.empty() {
		raise('cannot find max in an empty list');
	}
	let count = self.len();
	let max = 0;
	for let i = 1; i < count; ++i {
		if gt(self[i], self[max]) { max = i; }
	}
	return max;
};

let mean in VecTy = fn(onEach = fn(e) { return e; }) {
	if self.empty() {
		raise('cannot find mean of an empty list');
	}
	let count = self.len();
	let sum = onEach(self[0]);
	for let i = 1; i < count; ++i {
		sum += onEach(self[i]);
	}
	return sum / count;
};

let str in VecTy = fn() {
	let res = '[';
	for elem in self.each() {
		res += elem.str();
		res += ', ';
	}
	if !self.empty() {
		res.pop();
		res.pop();
	}
	res += ']';
	return res;
};