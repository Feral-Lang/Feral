let sys = import('std/sys');
let stat = import('std/stat');

inline if getOSName() == 'windows' {
let pathSeparator = '\\';
} else {
let pathSeparator = '/';
}

################################# Some definitions #################################

let fdRead = prelude.fsFdRead;
let fdWrite = prelude.fsFdWrite;
let fdClose = prelude.fsFdClose;

let exists = prelude.fsExists;
let install = prelude.fsInstall;
let mkdir = prelude.fsMkdir;
let remove = prelude.fsRemove;
let copy = prelude.fsCopy;
let move = prelude.fsMove;

let stdin = prelude.fsStdin;
let stdout = prelude.fsStdout;
let stderr = prelude.fsStderr;

# fs.walkdir()
let WALK_FILES = prelude.FS_WALK_FILES;
let WALK_DIRS = prelude.FS_WALK_DIRS;
let WALK_RECURSE = prelude.FS_WALK_RECURSE;
# <file>.seek()
let SEEK_SET = prelude.FS_SEEK_SET;
let SEEK_CUR = prelude.FS_SEEK_CUR;
let SEEK_END = prelude.FS_SEEK_END;
# file descriptor flags
let O_RDONLY = prelude.FS_O_RDONLY;
let O_WRONLY = prelude.FS_O_WRONLY;
let O_RDWR = prelude.FS_O_RDWR;
let O_APPEND = prelude.FS_O_APPEND;
let O_CREAT = prelude.FS_O_CREAT;
inline if getOSName() == 'linux' || getOSName() == 'macos' {
let O_DSYNC = prelude.FS_O_DSYNC;
}
let O_EXCL = prelude.FS_O_EXCL;
inline if getOSName() != 'windows' {
let O_NOCTTY = prelude.FS_O_NOCTTY;
let O_NONBLOCK = prelude.FS_O_NONBLOCK;
let O_SYNC = prelude.FS_O_SYNC;
}
inline if getOSName() == 'linux' {
let O_RSYNC = prelude.FS_O_RSYNC;
}
let O_TRUNC = prelude.FS_O_TRUNC;

####################################################################################

let fopen = fn(file, mode = 'r', mustClose = true) {
	return prelude.fsFopen(file, mode, mustClose);
};

let walkDir = fn(dir, mode = WALK_RECURSE, regex = '(.*)') {
	return prelude.fsWalkDir(dir, mode, regex);
};

let fdOpen = fn(name, mode = O_RDONLY) {
	return prelude.fsFdOpen(name, mode);
};

let dirExists = fn(name) {
	if !exists(name) { return false; }
	return stat.stat(name).isDir();
};

let pathAppend = fn(fullpath, pathparts...) {
	for let i = 0; i < pathparts.len(); ++i {
		if !fullpath.empty() { fullpath += pathSeparator; }
		fullpath += pathparts[i];
	}
};

let pathFrom = fn(pathparts...) {
	if pathparts.empty() { return ''; }
	let fullpath = '';
	pathAppend(fullpath, pathparts...);
	return fullpath;
};

# can also be written as:
#  fmtWithPath('$d', path)
let parentDir = fn(path) {
	let dirname = '';
	let locslash = path.rfind(pathSeparator);
	if locslash == -1 { dirname = '.'; }
	else { dirname = path.substr(0, locslash); }
	return dirname;
};

# config shorthands:
#   $s => feral binary location (self)
#   $p => full file path
#   $d => dirname (file's directory)
#   $f => filename (file name without directory)
#   $b => basename (file name without directory and extension)
#   $e => file extension
let fmtWithPath = fn(fmtstr, fpath) {
	let shorthand = false;
	let dirname = '';
	let filename = '';
	let ext = '';
	let locslash = fpath.rfind(pathSeparator);
	let locdot = fpath.rfind('.');
	if locslash == -1 {
		dirname = '.';
		if locdot == -1 {
			filename = fpath;
		} else {
			filename = fpath.substr(0, fpath.len() - locdot);
		}
	}
	else {
		dirname = fpath.substr(0, locslash);
		if locdot == -1 {
			filename = fpath.substr(locslash + 1, fpath.len() - locslash);
		} else {
			filename = fpath.substr(locslash + 1, fpath.len() - locslash - (fpath.len() - locdot + 1));
		}
	}
	if locdot == -1 { ext = ''; }
	else { ext = fpath.substr(locdot + 1, fpath.len() - locdot); }

	let res = fmtstr;
	for let i = 0; i < res.len(); ++i {
		if res[i] == '$' && !shorthand {
			shorthand = true;
			res.erase(i);
			--i;
			continue;
		}
		if !shorthand { continue; }
		shorthand = false;
		if res[i] == 's' {
			res.erase(i);
			res.insert(i, sys.selfBin);
			i += sys.selfBin.len();
			--i;
			continue;
		}
		if res[i] == 'p' {
			res.erase(i);
			res.insert(i, fpath);
			i += fpath.len();
			--i;
			continue;
		}
		if res[i] == 'd' {
			res.erase(i);
			res.insert(i, dirname);
			i += dirname.len();
			--i;
			continue;
		}
		if res[i] == 'b' {
			res.erase(i);
			res.insert(i, filename);
			i += filename.len();
			--i;
			continue;
		}
		if res[i] == 'f' {
			res.erase(i);
			let extdot = '';
			if !ext.empty() {
				extdot = '.';
			}
			res.insert(i, filename + extdot + ext);
			i += filename.len() + extdot.len() + ext.len();
			--i;
			continue;
		}
		if res[i] == 'e' {
			res.erase(i);
			res.insert(i, ext);
			i += ext.len();
			--i;
			continue;
		}
	}
	return res;
};