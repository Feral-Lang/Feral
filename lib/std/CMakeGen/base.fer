let template =
`cmake_minimum_required(VERSION {self.version})

project({self.projectName} C CXX)

set(CMAKE_CXX_STANDARD {self.cxxStd})
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if("$\\{DISABLE_INSTALL_MSG}" STREQUAL "true")
	message("-- Install messages are now lazily shown")
	set(CMAKE_INSTALL_MESSAGE LAZY)
endif()

set(CMAKE_INSTALL_PREFIX "{self.prefix}")
set(CMAKE_PREFIX_PATH "$\\{CMAKE_INSTALL_PREFIX};$\\{CMAKE_BINARY_DIR}")
include_directories($\\{CMAKE_INSTALL_PREFIX}/include/feral)
add_definitions(-DINSTALL_PREFIX=$\\{CMAKE_INSTALL_PREFIX})
message("-- Using PREFIX = $\\{CMAKE_INSTALL_PREFIX}")

# add extra path
list(APPEND CMAKE_MODULE_PATH "$\\{PROJECT_SOURCE_DIR}/external"
			      "{sys.installPrefix}/external")

set(FERAL_VERSION_MAJOR {sys.versionMajor})
set(FERAL_VERSION_MINOR {sys.versionMinor})
set(FERAL_VERSION_PATCH {sys.versionPatch})

execute_process(COMMAND date "+%a %b %d, %Y at %H:%M:%S" OUTPUT_VARIABLE BUILD_DATE OUTPUT_STRIP_TRAILING_WHITESPACE)

set(ORIGIN "$ORIGIN")
if(APPLE)
	set(ORIGIN "@loader_path")
endif()
set(CMAKE_INSTALL_RPATH "$\\{ORIGIN}/{self.rpathFromOrigin}lib/feral;$\\{ORIGIN}/.")
set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR TRUE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_MACOSX_RPATH TRUE)

include(CheckCXXCompilerFlag)

# For libGMP on macOS and BSD
if(APPLE OR $\\{CMAKE_SYSTEM_NAME} MATCHES ".*BSD.*")
	include_directories(/usr/local/include)
endif()

# Dependencies

find_library(GMP_LIBRARY gmp REQUIRED)
if(NOT GMP_LIBRARY)
	message(FATAL_ERROR "gmp is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
endif()

find_library(MPFR_LIBRARY mpfr REQUIRED)
if(NOT MPFR_LIBRARY)
	message(FATAL_ERROR "mpfr is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
endif()

{depsStr}

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
	message("-- Using thread flags: -pthread")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} -pthread")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} -pthread")
else()
	message("-- Using thread flags: $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
endif()

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "$\\{CCACHE_PROGRAM}")
    message("-- Using ccache")
endif()

if($\\{CMAKE_SYSTEM_NAME} MATCHES ".*BSD.*")
	add_definitions(-D_WITH_GETLINE)
endif()

# Generally, disabled for CI purposes
# Also needed when running valgrind as valgrind does not support instruction bytes for Vector<bool>
if(NOT DEFINED ENV\\{DISABLE_MARCH_NATIVE} OR "$ENV\\{DISABLE_MARCH_NATIVE}" STREQUAL "")
	check_cxx_compiler_flag(-march=native COMPILER_SUPPORTS_MARCH_NATIVE)
	if(COMPILER_SUPPORTS_MARCH_NATIVE)
		set(CMAKE_CXX_FLAGS "$\\{CMAKE_CXX_FLAGS} -march=native")
	endif()
endif()

# Force DWARF4 as valgrind does not support anything newer (clang-14 defaults to DWARF5).
if(NOT CMAKE_BUILD_TYPE STREQUAL "Release")
	check_cxx_compiler_flag(-gdwarf-4 COMPILER_SUPPORTS_GDWARF4)
	if(COMPILER_SUPPORTS_GDWARF4)
		set(CMAKE_CXX_FLAGS "$\\{CMAKE_CXX_FLAGS} -gdwarf-4")
	endif()
endif()

# Because Android has issues with dlopen()'s RTLD_GLOBAL; See:
# https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#changes-to-library-search-order
# https://android.googlesource.com/platform/bionic/+/30b17e32f0b403a97cef7c4d1fcab471fa316340/linker/linker_namespaces.cpp#100
# https://android-ndk.narkive.com/iNWj05IV/weak-symbol-linking-when-loading-dynamic-libraries
set(EXTRA_LD_FLAGS "")
if(ANDROID)
	set(EXTRA_LD_FLAGS "-z global")
endif()

if(CMAKE_COMPILER_IS_GNUCXX AND DEFINED WITH_COVERAGE)
    set(WITH_COVERAGE "-D_WITH_COVERAGE")
    include(CodeCoverage)
    APPEND_COVERAGE_COMPILER_FLAGS()
    setup_target_for_coverage_gcovr_html(NAME feral_cov EXECUTABLE $\\{PROJECT_SOURCE_DIR}/codecov.sh $\\{PROJECT_SOURCE_DIR})
endif()

# Finally! The sources!!!!!

# Install {self.projectName} headers
install(DIRECTORY "$\\{CMAKE_SOURCE_DIR}/include/"
	DESTINATION "$\\{CMAKE_INSTALL_PREFIX}/include/feral/{self.projectName}"
)

{installsStr}

# Libraries

{sharedLibsStr}

# Binaries

{binariesStr}`;
