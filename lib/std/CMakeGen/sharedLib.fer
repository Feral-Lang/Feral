let vec = import('std/vec');
let lang = import('std/lang');
let findLib = import('./findLib');

let sharedLibBase =
`# {self.libName}
set(mod "{self.libName}")
add_library($\\{mod} SHARED "$\\{PROJECT_SOURCE_DIR}/{self.srcPath}/$\\{mod}.cpp" {self.otherSrcs})
target_include_directories($\\{mod} PRIVATE $\\{PROJECT_SOURCE_DIR}/include)
target_link_libraries($\\{mod}{depNames})
set_target_properties($\\{mod}
    PROPERTIES
    PREFIX "libferal"
    ARCHIVE_OUTPUT_NAME "libferal$\\{mod}"
    LINK_FLAGS "$\\{EXTRA_LD_FLAGS}"
    LIBRARY_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for so (non-windows)
    RUNTIME_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for dll (windows)
    ARCHIVE_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for lib (windows)
    INSTALL_RPATH_USE_LINK_PATH TRUE
)
install(TARGETS $\\{mod}
	LIBRARY
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
	ARCHIVE
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
	RUNTIME
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
)`;

let feralLib = findLib.new('feral');
feralLib.makeReqd().addPathSuffixes('feral');

let SharedLib = lang.struct(
	projectName = '',
	libName = 'sampleSharedLib',
	otherSrcs = '',
	deps = vec.new(refs = true),
	srcPath = 'src'
);
SharedLib.setTypeName('SharedLib');

let new = fn(name, proj) { return SharedLib(libName = name, projectName = proj); };

let addSrcs in SharedLib = fn(srcs...) {
	for src in srcs.each() {
		self.otherSrcs += ' ';
		self.otherSrcs += src;
	}
	return ref(self);
};

let addDep in SharedLib = fn(dep) { self.deps.push(dep); return ref(self); };

let gen in SharedLib = fn() {
	let depNames = ' ';
	for d in self.deps.each() {
		depNames += d.getName() + ' ';
	}
	depNames.pop();
	return sharedLibBase.fmt();
};

let getName in SharedLib = fn() {
	return self.libName;
};