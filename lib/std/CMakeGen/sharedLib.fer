let os = import('std/os');
let vec = import('std/vec');

let sharedLibBase =
`# {self.libName}
set(mod "{self.libName}")
add_library($\\{mod} SHARED "$\\{PROJECT_SOURCE_DIR}/{self.srcPath}/$\\{mod}.cpp" {self.otherSrcs})
target_include_directories($\\{mod} PRIVATE $\\{PROJECT_SOURCE_DIR}/include)
target_link_libraries($\\{mod}{depNames})
set_target_properties($\\{mod}
    PROPERTIES
    PREFIX "libferal"
    ARCHIVE_OUTPUT_NAME "libferal$\\{mod}"
    LINK_FLAGS "$\\{EXTRA_LD_FLAGS}"
    LIBRARY_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for so (non-windows)
    RUNTIME_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for dll (windows)
    ARCHIVE_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/lib/feral/$<0:>" # for lib (windows)
    INSTALL_RPATH_USE_LINK_PATH TRUE
)
install(TARGETS $\\{mod}
	RUNTIME_DEPENDENCY_SET RTDS_LIB_$\\{mod}
	LIBRARY
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
	ARCHIVE
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
	RUNTIME
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
)
{pkgDLLInstall}`;

# for FindPkg dependencies
let pkgDLLInstallBase =
`install(RUNTIME_DEPENDENCY_SET RTDS_LIB_$\\{mod}
	PRE_INCLUDE_REGEXES
	  {pkgDLLRegexes}
	PRE_EXCLUDE_REGEXES
	 ".*"
	LIBRARY
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
	RUNTIME
	  DESTINATION "lib/feral/{self.projectName}$<0:>"
)`;

let SharedLib = struct(
	projectName = '',
	libName = 'sampleSharedLib',
	otherSrcs = '',
	deps = vec.new(refs = true),
	srcPath = 'src'
);
SharedLib.setTypeName('SharedLib');

let new = fn(name, proj) { return SharedLib(libName = name, projectName = proj); };

let addSrcs in SharedLib = fn(srcs...) {
	for src in srcs.each() {
		self.otherSrcs += ' ';
		self.otherSrcs += src;
	}
	return ref(self);
};

let addDep in SharedLib = fn(dep) { self.deps.push(dep); return ref(self); };

let gen in SharedLib = fn() {
	let depNames = ' ';
	let pkgDLLRegexes = ' ';
	for d in self.deps.each() {
		depNames += d.getName() + ' ';
		if os.name == 'windows' && d._typestr_() == 'FindPkg' {
			let depList = d.getVCPkgDependenceList();
			for dep in depList.each() {
				pkgDLLRegexes += '".*' + dep + '.*" ';
			}
		}
	}
	# remove the space at the end
	pkgDLLRegexes.pop();
	depNames.pop();
	let pkgDLLInstall = '';
	if os.name == 'windows' {
		pkgDLLInstall = pkgDLLInstallBase.fmt();
	}
	return sharedLibBase.fmt();
};

let getName in SharedLib = fn() {
	return self.libName;
};