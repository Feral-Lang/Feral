let io = import('std/io');
let fs = import('std/fs');
let vec = import('std/vec');
let time = import('std/time');

let Levels = enum(
    .FATAL,
    .WARN,
    .INFO,
    .DEBUG,
    .TRACE
);

# red, yellow, magenta, cyan, green
# param type: Level (int)
let lvlColToStr = fn(lvl) {
    if lvl == Levels.FATAL { return '{r}'; }
    if lvl == Levels.WARN { return '{y}'; }
    if lvl == Levels.INFO { return '{g}'; }
    if lvl == Levels.DEBUG { return '{c}'; }
    if lvl == Levels.TRACE { return '{m}'; }
    return '';
};

let lvlToStr = fn(lvl) {
    if lvl == Levels.FATAL { return 'FATAL'; }
    if lvl == Levels.WARN { return 'WARN'; }
    if lvl == Levels.INFO { return 'INFO'; }
    if lvl == Levels.DEBUG { return 'DEBUG'; }
    if lvl == Levels.TRACE { return 'TRACE'; }
    return 'INVALID';
};

let FileInfo = struct(
    f = nil,
    level = Levels.WARN,
    withCol = true
);
FileInfo.setTypeName('FileInfo');

# list of FileInfo
let targets = vec.new(refs = true);

let addTarget = fn(target, level = Levels.WARN, withCol = true) {
    targets.push(FileInfo(target, level, withCol));
};

let addTargetByName = fn(name, level = Levels.WARN, withCol = true, mustClose = true) {
    let file = fs.fopen(name, 'w+', mustClose);
    targets.push(FileInfo(ref(file), level, withCol));
};

let log = fn(lvl, data...) {
    let lvlCol = lvlColToStr(lvl);
    let lvlStr = lvlToStr(lvl);
    let timeStr = time.format(time.now());
    let prefix = ''.append('[', timeStr, '][', lvlStr, ']: ');
    let prefixCol = ''.append('{0}[', timeStr, '][', lvlCol, lvlStr, '{0}]: ');
    for t in targets.each() {
        if t.level < lvl { continue; }
        if t.withCol {
            io.fcprintln(t.f, prefixCol, data...);
        } else {
            io.fprintln(t.f, prefix, data...);
        }
    }
};

let fatal = fn(data...) { log(Levels.FATAL, data...); };
let warn = fn(data...) { log(Levels.WARN, data...); };
let info = fn(data...) { log(Levels.INFO, data...); };
let debug = fn(data...) { log(Levels.DEBUG, data...); };
let trace = fn(data...) { log(Levels.TRACE, data...); };