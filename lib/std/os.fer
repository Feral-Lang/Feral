# A lot of stuff depends on the os module. Best to make sure it does not import modules.

loadlib('std/OS');

let fs = import('std/fs');

# OS name, current possible values:
#   windows
#   android
#   linux
#   macos
#   bsd
let name = getOSName();
# OS distro, current possible values:
#   windows
#   windows64
#   android
#   linux
#   macos
#   bsd
#   freebsd
#   netbsd
#   openbsd
#   bsdi
#   dragonflybsd
let distro = getOSDistro();

# chmod command wrapper
inline if name != 'windows' {
let chmod = fn(dest, mode = '0755', recurse = true) {
    return chmodNative(dest, mode, recurse);
};
}

let setEnv = fn(var, val, overwrite = false) {
    return setEnvNative(var, val, overwrite);
};

let getEnvHome = fn() {
    let var = 'HOME';
    if name == 'windows' {
        var = 'USERPROFILE';
    }
    return getEnv(var);
};

inline if name == 'windows' {
let envDelimiter = ';';
} else {
let envDelimiter = ':';
}

# find the given file (exec) in the PATH variables
# return the entire file path if found, empty string if not
let findExec = fn(exec) {
    let PATH = getEnv('PATH');
    if PATH == nil { return nil; }
    for dir in PATH.split(envDelimiter).each() {
        let p = fs.pathFrom(dir, exec);
        if fs.exists(p) { return p; }
    }
    return nil;
};
