# A lot of stuff depends on the os module. Best to make sure it does not import modules.

mload('std/OS');

let setEnv = fn(var, val, overwrite = false) {
	return setEnvNative(var, val, overwrite);
};

let getEnvHome = fn() {
	let var = 'HOME';
	if name == 'windows' {
		var = 'USERPROFILE';
	}
	return getEnv(var);
};

# OS name, current possible values:
# windows
# android
# linux
# macos
# bsd
let name = getNameNative();

# execute command, optionally get output in second argument
# if it is a string or a vector
let exec = fn(cmd, out = nil) {
	return execNative(cmd, out);
};

# chmod command wrapper
inline if name != 'windows' {
let chmod = fn(dest, mode = '0755', recurse = true) {
	return chmodNative(dest, mode, recurse);
};
}