let Err = struct(
	code = nil,
	msg = ''
);
Err.setTypeName('Err');

let getCode in Err = fn() { return ref(self.code); };
let getMsg in Err = fn() { return ref(self.msg); };

let Result = struct(
	val = nil,
	isok = false
);
Result.setTypeName('Result');

let ok = fn(val) { return Result(ref(val), true); };
let err = fn(code, msg...) {
	let r = Result(Err(code), false);
	for m in msg.each() {
		r.val.msg += m.str();
	}
	return ref(r);
};

let isOk in Result = fn() { return self.isok; };
let isErr in Result = fn() { return !self.isok; };

let getVal in Result = fn() { return ref(self.val); };

let str in Err = fn() {
	let s = 'Err<';
	s += self.val.str();
	s += ':';
	s += msg;
	s += '>';
	return ref(s);
};

let str in Result = fn() {
	let s = 'Result';
	s += self.isok ? '(Ok)' : '(Err)';
	s += '<';
	s += val.str();
	s += '>';
	return ref(s);
};