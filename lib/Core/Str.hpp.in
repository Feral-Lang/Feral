Var *strAdd(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	    const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc,
			"expected string/char argument"
			" for string addition, found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	VarStr *res = vm.makeVar<VarStr>(loc, as<VarStr>(args[0])->get());
	res->get() += as<VarStr>(args[1])->get();
	return res;
}

Var *strMul(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	    const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) {
		vm.fail(loc, "expected integer argument for string multiplication, found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef lhs = as<VarStr>(args[0])->get();
	int64_t rhs   = as<VarInt>(args[1])->get();
	VarStr *res   = vm.makeVar<VarStr>(loc, "");
	for(int64_t i = 1; i < rhs; ++i) {
		res->get() += lhs;
	}
	return res;
}

Var *strAddAssn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc, "expected string argument for addition assignment, found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	VarStr *res = as<VarStr>(args[0]);
	res->get() += as<VarStr>(args[1])->get();
	return args[0];
}

Var *strMulAssn(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) {
		vm.fail(loc,
			"expected integer argument for string multiplication assignment, found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	String lhs  = as<VarStr>(args[0])->get();
	int64_t rhs = as<VarInt>(args[1])->get();
	for(int64_t i = 1; i < rhs; ++i) {
		as<VarStr>(args[0])->get() += lhs;
	}
	return args[0];
}

// logical functions

Var *strLT(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc, "expected string/stringref argument for '<', found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs < rhs ? vm.getTrue() : vm.getFalse();
}

Var *strGT(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc, "expected string argument for '>', found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs > rhs ? vm.getTrue() : vm.getFalse();
}

Var *strLE(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc, "expected string argument for '<=', found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs <= rhs ? vm.getTrue() : vm.getFalse();
}

Var *strGE(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) {
		vm.fail(loc, "expected string argument for '>=', found: ", vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs >= rhs ? vm.getTrue() : vm.getFalse();
}

Var *strEq(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) return vm.getFalse();
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs == rhs ? vm.getTrue() : vm.getFalse();
}

Var *strNe(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarStr>()) return vm.getTrue();
	StringRef lhs = as<VarStr>(args[0])->get();
	StringRef rhs = as<VarStr>(args[1])->get();
	return lhs != rhs ? vm.getTrue() : vm.getFalse();
}

Var *strAt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	   const StringMap<AssnArgData> &assn_args)
{
	if(!args[1]->is<VarInt>()) {
		vm.fail(loc, "expected argument to be of type integer for string.at(), found: ",
			vm.getTypeName(args[1]));
		return nullptr;
	}
	StringRef str = as<VarStr>(args[0])->get();
	size_t pos    = as<VarInt>(args[1])->get();
	if(pos >= str.size()) return vm.getNil();
	return vm.makeVar<VarStr>(loc, str[pos]);
}