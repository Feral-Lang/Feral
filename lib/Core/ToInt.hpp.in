Var *nilToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	      const Map<String, AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, 0);
}

Var *boolToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<String, AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarBool>(args[0])->get() ? 1 : 0);
}

Var *typeIDToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		 const Map<String, AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarTypeID>(args[0])->get());
}

Var *intToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	      const Map<String, AssnArgData> &assn_args)
{
	return args[0];
}

Var *fltToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	      const Map<String, AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, as<VarFlt>(args[0])->get());
}

Var *strToInt(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	      const Map<String, AssnArgData> &assn_args)
{
	return vm.makeVar<VarInt>(loc, std::stoll(as<VarStr>(args[0])->get()));
}