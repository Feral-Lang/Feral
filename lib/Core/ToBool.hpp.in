Var *allToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return vm.getFalse();
}

Var *nilToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return vm.getFalse();
}

Var *boolToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		const Map<StringRef, AssnArgData> &assn_args)
{
	return args[0];
}

Var *typeIDToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
		  const Map<StringRef, AssnArgData> &assn_args)
{
	return vm.getTrue();
}

Var *intToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return mpz_cmp_si(as<VarInt>(args[0])->getSrc(), 0) ? vm.getTrue() : vm.getFalse();
}

Var *fltToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return mpfr_cmp_si(as<VarFlt>(args[0])->getSrc(), 0) ? vm.getTrue() : vm.getFalse();
}

Var *strToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return !as<VarStr>(args[0])->get().empty() ? vm.getTrue() : vm.getFalse();
}

Var *vecToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return !as<VarVec>(args[0])->get().empty() ? vm.getTrue() : vm.getFalse();
}

Var *mapToBool(Interpreter &vm, const ModuleLoc *loc, Span<Var *> args,
	       const Map<StringRef, AssnArgData> &assn_args)
{
	return !as<VarMap>(args[0])->get().empty() ? vm.getTrue() : vm.getFalse();
}