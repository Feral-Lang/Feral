#include "Error.hpp"
#include "Parser/Stmts.hpp"

namespace fer
{

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBlock ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtBlock::genCode(Bytecode &bc)
{
	if(!is_top) bc.addInstrInt(Opcode::PUSH_LAYER, loc, 1);
	for(auto &s : stmts) {
		if(!s->genCode(bc)) {
			err::out(loc, {"failed to generate bytecode for block"});
			return false;
		}
	}
	if(!is_top) bc.addInstrInt(Opcode::POP_LAYER, loc, 1);
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtSimple /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtSimple::genCode(Bytecode &bc)
{
	switch(val.getTok().getVal()) {
	case lex::STR: bc.addInstrStr(Opcode::LOAD_CONST, loc, val.getDataStr()); return true;
	case lex::INT: bc.addInstrInt(Opcode::LOAD_CONST, loc, val.getDataInt()); return true;
	case lex::FLT: bc.addInstrFlt(Opcode::LOAD_CONST, loc, val.getDataFlt()); return true;
	case lex::CHAR: bc.addInstrChr(Opcode::LOAD_CONST, loc, val.getDataInt()); return true;
	default: break;
	}
	err::out(loc, {"unable to generate bytecode - unknown simple type: ", val.getTok().cStr()});
	return false;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtFnArgs /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnArgs::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtExpr /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtExpr::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtVar //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtVar::genCode(Bytecode &bc)
{
	if(!val) {
		err::out(loc, {"cannot generate bytecode of"
			       " a variable with no value: ",
			       name.getDataStr()});
		return false;
	}
	if(!val->genCode(bc)) {
		err::out(loc, {"failed to generate bytecode of variable val: ", name.getDataStr()});
		return false;
	}
	if(is_const) bc.addInstrStr(Opcode::CREATE_CONST, loc, name.getDataStr());
	else bc.addInstrStr(Opcode::CREATE_VAR, loc, name.getDataStr());
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnSig ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnSig::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFnDef ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFnDef::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// StmtVarDecl /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtVarDecl::genCode(Bytecode &bc)
{
	for(auto &d : decls) {
		if(!d->genCode(bc)) return false;
	}
	return true;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtCond /////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtCond::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtFor //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtFor::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtRet //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtRet::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////// StmtContinue ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtContinue::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtBreak ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtBreak::genCode(Bytecode &bc) { return true; }

///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////// StmtDefer ////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

bool StmtDefer::genCode(Bytecode &bc) { return true; }

} // namespace fer