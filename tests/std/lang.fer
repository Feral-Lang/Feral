let assert = import('std/assert');

let vec = import('std/vec');
let map = import('std/map');
let lang = import('std/lang');

let SomeTy = lang.struct(a = 10, b = 20);

let func1 in SomeTy = fn(x, y = 10, .kw, va...) {
	assert.eq(self.a, 100);
	assert.eq(self.b, 200);
	assert.eq(x, 1);
	assert.eq(y, 2);
	assert.eq(kw['a'], 10);
	assert.eq(kw['b'], 20);
	assert.eq(kw['c'], 30);
	assert.eq(va, vec.new(3, 4));
};

let func2 in SomeTy = fn(x, y = 10, .kw, va...) {
	assert.eq(self.a, 100);
	assert.eq(self.b, 200);
	assert.eq(x, 1);
	assert.eq(y, 10);
	assert.eq(kw['a'], 10);
	assert.eq(kw['b'], 20);
	assert.eq(va.empty(), true);
};

let test = SomeTy(a = 100, b = 200);

test.func1(1, a = 10, b = 20, c = 30, 2, 3, 4);
test.func2(1, a = 10, b = 20);

###############################################################################################################
#################################################### ENUM #####################################################
###############################################################################################################

let EXIT_CODE = lang.enum(
	.OK,
	.FAIL,
	.IO_ERR,
	.LEX_FAIL,
	.PARSE_FAIL,
	.SOME_ERR = 20
);

#io.println(EXIT_CODE.PARSE_FAIL);
assert.eq(EXIT_CODE.PARSE_FAIL, 4);
assert.eq(EXIT_CODE.SOME_ERR, 20);