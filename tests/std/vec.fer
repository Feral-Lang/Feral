let assert = import('std/assert');

let vec = import('std/vec');

let v = vec.new(3, 2, 1, 4);

assert.eq(v.capacity(), 4);
assert.eq(v.len(), 4);
assert.eq(!v.empty(), true);
assert.eq(v.front(), 3);
assert.eq(v.back(), 4);
assert.eq(v.push(5).len(), 5);
assert.eq(v.pop().len(), 4);
assert.eq(v.insert(1, 5), vec.new(3, 5, 2, 1, 4));
assert.eq(v.erase(1), vec.new(3, 2, 1, 4));
assert.eq(v.set(2, 5), vec.new(3, 2, 5, 4));
assert.eq(v.at(2), 5);
assert.eq(v[2], 5);
v.sort(rev = true);
assert.eq(v, vec.new(5, 4, 3, 2));
v.sort();
assert.eq(v, vec.new(2, 3, 4, 5));

let v2 = vec.new();

for e in v.each() {
	v2.push(e);
}
assert.eq(v, v2);

let slice = v.slice(1, 3);
assert.eq(slice, vec.new(3, 4));

let v3 = vec.new();
v.push('string');
for e in v.each() {
	v3.push(e);
}
v.str();

let v3 = vec.new(1, 2, 3, 4, 5.5, 6);

assert.eq(v3.len(), 6);
assert.eq(v3.min(), 0);
assert.eq(v3.max(), 5);
assert.eq(v3[v3.min()], 1);
assert.eq(v3[v3.max()], 6);
assert.eq(v3.mean(fn(e) { return e.flt(); }), 3.583333);

v3.append(v3);
assert.eq(v3.len(), 12);
assert.eq(v3.min(), 0);
assert.eq(v3.max(), 5);
assert.eq(v3[v3.min()], 1);
assert.eq(v3[v3.max()], 6);
assert.eq(v3.mean(fn(e) { return e.flt(); }), 3.583333);