let assert = import('std/assert');

let vec = import('std/vec');
let algorithm = import('std/algorithm');

/*
 * test to build a correct dependency frame list
 *       x
 *   a       d
 * b   c   e   f
 *       g
 *
 * ie.
 * 'x' depends on 'a' and 'd'
 * 'a' depends on 'b' and 'c'
 * 'd' depends on 'e' and 'f'
 * 'c' & 'e' depend on 'g'
 */

let deptree = algorithm.newDependenceTree();

let a = deptree.newNode('a');
let b = deptree.newNode('b');
let c = deptree.newNode('c');
let d = deptree.newNode('d');
let e = deptree.newNode('e');
let f = deptree.newNode('f');
let g = deptree.newNode('g');
let x = deptree.newNode('x');

a.dependsOn(b, c);
d.dependsOn(e, f);
c.dependsOn(g);
e.dependsOn(g);
x.dependsOn(a, d);

let frames = deptree.generateParallelFrames();

assert.eq(frames[0].len(), 3);
assert.eq(frames[0].find('g'), true);
assert.eq(frames[0].find('f'), true);
assert.eq(frames[0].find('b'), true);
assert.eq(frames[1].len(), 2);
assert.eq(frames[1].find('c'), true);
assert.eq(frames[1].find('e'), true);
assert.eq(frames[2].len(), 2);
assert.eq(frames[2].find('a'), true);
assert.eq(frames[2].find('d'), true);
assert.eq(frames[3].len(), 1);
assert.eq(frames[3].find('x'), true);