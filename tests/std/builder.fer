let assert = import('std/assert');

let vec = import('std/vec');
let builder = import('std/builder');

/*
 * test to build a correct dependency frame list
 *       x
 *   a       d
 * b   c   e   f
 *       g
 *
 * ie.
 * 'x' depends on 'a' and 'd'
 * 'a' depends on 'b' and 'c'
 * 'd' depends on 'e' and 'f'
 * 'c' & 'e' depend on 'g'
*/

let project = builder.new('a');

let tmp = project.addCLib('tmp');
let a = project.addNativeLib('a', './a');
let b = project.addNativeLib('b', './b');
let c = project.addNativeLib('c', './c');
let d = project.addNativeLib('d', './d');
let e = project.addNativeLib('e', './e');
let f = project.addNativeLib('f', './f');
let g = project.addNativeLib('g', './g');
let x = project.addNativeLib('x', './x');

a.dependsOn(b, c);
d.dependsOn(e, f);
c.dependsOn(g);
e.dependsOn(g);
x.dependsOn(a, d);

let frames = project.build(true);

assert.eq(frames[0], vec.new('g', 'f', 'b'));
assert.eq(frames[1], vec.new('c', 'e'));
assert.eq(frames[2], vec.new('d', 'a'));
assert.eq(frames[3], vec.new('x'));