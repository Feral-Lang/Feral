let assert = import('std/assert');

# logical
assert.lt(1, 2);
assert.gt(1, 0);
assert.le(1, 1);
assert.ge(1, 1);
assert.eq(1, 1);
assert.ne(1, 2);

# arithmetic
assert.eq(4 << 1, 8);
assert.eq(4 >> 1, 2);
assert.eq(5 + 1, 6);
assert.eq(5 - 1, 4);
assert.eq(5 * 2, 10);
assert.eq(5 / 2, 2);
assert.eq(5 % 2, 1);

let a = 4, b = 2;
assert.eq((a <<= b), 16);
assert.eq((a >>= b), 4);
assert.eq((a += b), 6);
assert.eq((a -= b), 4);
assert.eq((a *= b), 8);
assert.eq((a /= b), 4);
assert.eq((a %= b), 0);

# others
assert.eq(4 ** 3, 64);
assert.eq(64 // 3, 4);
assert.eq(++4, 5);
assert.eq(4++, 4);
assert.eq(--4, 3);
assert.eq(4--, 4);

assert.ne(-5, -(-5));

# bitwise
assert.eq((5 & 2), 0);
assert.eq((5 & 4), 4);
assert.eq((5 | 2), 7);
assert.eq((5 | 4), 5);
assert.eq((5 ^ 2), 7);
assert.eq((5 ^ 4), 1);
assert.eq(~5, -6);
assert.eq(~0, -1);

assert.eq(((a = 5) &= b), 0);
assert.eq(((a = 5) |= b), 7);
assert.eq(((a = 5) ^= b), 7);

assert.eq(5.popcnt(), 2);
assert.eq(0.popcnt(), 0);