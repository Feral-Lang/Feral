# logical
assert(1 < 2);
assert(1 > 0);
assert(1 <= 1);
assert(1 >= 1);
assert(1 == 1);
assert(1 != 2);

# arithmetic
assert(4 << 1 == 8);
assert(4 >> 1 == 2);
assert(5 + 1  == 6);
assert(5 - 1  == 4);
assert(5 * 2  == 10);
assert(5 / 2  == 2);
assert(5 % 2  == 1);

let a = 4, b = 2;
assert((a <<= b) == 16);
assert((a >>= b) == 4);
assert((a += b)  == 6);
assert((a -= b)  == 4);
assert((a *= b)  == 8);
assert((a /= b)  == 4);
assert((a %= b)  == 0);

# others
assert(4 ** 3 == 64);
assert(64 // 3 == 4);
assert(++4 == 5);
assert(4++ == 4);
assert(--4 == 3);
assert(4-- == 4);

assert(-5 != -(-5));

# bitwise
assert((5 & 2) == 0);
assert((5 & 4) == 4);
assert((5 | 2) == 7);
assert((5 | 4) == 5);
assert((5 ^ 2) == 7);
assert((5 ^ 4) == 1);
assert(~5 == -6);
assert(~0 == -1);

assert(((a = 5) &= b) == 0);
assert(((a = 5) |= b) == 7);
assert(((a = 5) ^= b) == 7);

assert(5.popcnt() == 2);
assert(0.popcnt() == 0);