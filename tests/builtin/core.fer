let assert = import('std/assert');

assert.eq('some string'._typestr_(), 'Str');

# raise
let div = fn(x, y) {
	if y == 0 {
		raise('div by zero');
	}
	return x / y;
};

let x = div(5, 0) or e {
	return 10 / 0 or e2 {
		assert.eq(e, 'raised: div by zero');
		assert.eq(e2, 'division by zero');
		return 20; # set 20 as the value
	};
};
let y = div(div(12, 0) or { return 10; }, 10);
assert.eq(x, 20);
assert.eq(y, 1);
assert.eq(!feral.varExists('e2'), true);
assert.eq(!feral.varExists('e'), true);

assert.eq(!feral.varExists('a'), true);
assert.eq(feral.varExists('feral'), true);

feral.args;
feral.installPath;
feral.binaryPath;
feral.installPath;

feral.versionMajor;
feral.versionMinor;
feral.versionPatch;

feral.buildDate;
feral.buildCompiler;

feral.exit(0);