let io = import('std/io');
let os = import('std/os');
let sys = import('std/sys');
let lang = import('std/lang');

let default_inc_dir = '-I/usr/include';
let default_lib_dir = '-L/usr/lib';
let shared_lib_out_ext = '.so';
let shared_lib_flag = '-shared';

if os.name == 'macos' || os.name == 'bsd' {
	default_inc_dir = '-I/usr/local/include';
	default_lib_dir = '-L/usr/local/lib';
}
if os.name == 'macos' {
	shared_lib_out_ext = '.dylib';
	shared_lib_flag = '-dynamiclib';
}

let builder_t = lang.struct(
	is_dll = false,
	compiler = 'clang++',
	compiler_opts = ' -std=c++11 ',
	inc_dirs = ' ' + default_inc_dir + ' ',
	lib_dirs = ' ' + default_lib_dir + ' ',
	lib_flags = ' ',
	srcs = ' ',
	linker_flags = ' '
);

let new = fn() {
	let builder = builder_t();
	if os.name == 'linux' {
		builder.compiler = 'g++';
	}
	return builder;
};

let make_dll in builder_t = fn() {
	self.compiler_opts += shared_lib_flag + ' -fPIC -rdynamic -Wl,-rpath,' + sys.dll_load_loc + ' ';
	self.is_dll = true;
	return self;
};

let add_comp_opts in builder_t = fn(opt) {
	self.compiler_opts += opt + ' ';
	return self;
};

let add_inc in builder_t = fn(inc_dir) {
	self.inc_dirs += inc_dir + ' ';
	return self;
};

let add_lib in builder_t = fn(lib_flag, lib_dir = '') {
	if !lib_dir.empty() {
		self.lib_dirs += lib_dir + ' ';
	}
	self.lib_flags += lib_flag + ' ';
	return self;
};

let add_src in builder_t = fn(src) {
	self.srcs += src + ' ';
	return self;
};

let build in builder_t = fn(output_file, dry_run = false) {
	let compiler_loc = os.exec_exists(self.compiler);
	if compiler_loc.empty() {
		io.cprintln('{p}could not find compiler{r}', self.compiler, '{p}in {c}$PATH{0}');
		return 1;
	}
	let out_file = output_file;
	if self.is_dll { out_file = 'libferal' + out_file + shared_lib_out_ext; }
	let cmd = compiler_loc + self.compiler_opts + self.inc_dirs + self.lib_dirs + self.lib_flags + self.srcs + '-o ' + sys.dll_load_loc + '/' + out_file;
	io.println(cmd);
	if dry_run { return 0; }
	return os.exec(cmd);
};
