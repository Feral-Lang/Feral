/*
	+===========+===========+
	| Feral     | JSON      |
	+===========+===========+
	| nil       | null      |
	+-----------+-----------+
	| int, flt  | number    |
	+-----------+-----------+
	| str       | string    |
	+-----------+-----------+
	| true      | true      |
	+-----------+-----------+
	| false     | false     |
	+-----------+-----------+
	| vec       | array     |
	+-----------+-----------+
	| map       | object    |
	+-----------+-----------+
*/

let map = import('std/map');
let str = import('std/str');
let vec = import('std/vec');
let lang = import('std/lang');

let dumps = fn(obj, indent = -1, indent_char = ' ') {
	let js = obj.to_json(indent, indent_char);
	if js.empty() {
		raise('type ' + obj._typestr_() + ' does not implement JSON serialization');
	}
	return js;
};

let loads = fn(data) {
	let toks = tokenize(data);
	return parse(toks);
};

let bind = fn(struct_instance, json_obj) {
	for f in json_obj.each() {
		struct_instance.set_field(f.0, f.1);
	}
};

###########################################################################################
# JSON token structs, enums, and string variants
###########################################################################################

let tok_type = lang.enum(
	.UNKNOWN,
	.NIL,
	.INT,
	.FLT,
	.STR,
	.TRUE,
	.FALSE,

	.COLON,
	.COMMA,

	.LBRACK,
	.RBRACK,
	.LBRACE,
	.RBRACE
);

let tok_type_strs = vec.new(
	'UNKNOWN',
	'NIL',
	'INT',
	'FLT',
	'STR',
	'TRUE',
	'FALSE',

	'COLON',
	'COMMA',

	'LBRACK',
	'RBRACK',
	'LBRACE',
	'RBRACE'
);

let tok_t = lang.struct(
	type = 0,
	val = ''
);

tok_t.set_typename('tok_t');

let str in tok_t = fn() {
	let data = 'tok_t{type = ' + tok_type_strs[self.type];
	if !self.val.empty() {
		data += ', val = ' + self.val;
	}
	data += '}';
	return data;
};

###########################################################################################
# JSON tokenizer & helper functions
###########################################################################################

let tokenize = fn(data) {
	let toks = vec.new();
	let data_len = data.len();
	for let i = 0; i < data_len; ++i {
		if data[i] == '"' {
			let s = get_const_str(data, i, data_len);
			toks.push(tok_t(tok_type.STR, s));
			continue;
		}
		if data.ischat(i, '\n\t ') { continue; }
		if data[i] == ':' { toks.push(tok_t(tok_type.COLON)); continue; }
		elif data[i] == ',' { toks.push(tok_t(tok_type.COMMA)); continue; }
		elif data[i] == '[' { toks.push(tok_t(tok_type.LBRACK)); continue; }
		elif data[i] == ']' { toks.push(tok_t(tok_type.RBRACK)); continue; }
		elif data[i] == '{' { toks.push(tok_t(tok_type.LBRACE)); continue; }
		elif data[i] == '}' { toks.push(tok_t(tok_type.RBRACE)); continue; }
		elif data[i] == '-' || (data[i] >= '0' && data[i] <= '9') {
			let i_or_f = false; # false => int
			let num = '';
			if data[i] == '-' { num += data[i]; ++i; }
			num += get_num(data, i_or_f, i, data_len);
			if i_or_f { toks.push(tok_t(tok_type.FLT, num)); }
			else { toks.push(tok_t(tok_type.INT, num)); }
			continue;
		}
		let t = get_kw(data, i, data_len);
		toks.push(tok_t(t));
	}
	return toks;
};

let get_const_str = fn(data, i = 0, end = -1) {
	if end == -1 { end = data.len(); }
	let start = data[i++];
	let res = '';
	let found = false;
	let cont_backslash = 0;
	while i < end {
		if data[i] == '\\' {
			++cont_backslash;
			res += data[i++];
			continue;
		}
		if data[i] == start && cont_backslash % 2 == 0 {
			found = true;
			break;
		}
		res += data[i++];
		cont_backslash = 0;
	}
	if !found {
		raise('invalid json: no end quotes for data near: ' + res);
	}
	# i is now at end quote
	return res;
};

let get_num = fn(data, i_or_f, i = 0, end = -1) {
	if end == -1 { end = data.len(); }
	let res = '';
	while i < end {
		let ch = data[i];
		if (ch < '0' || ch > '9') && ch != '.' { break; }
		if ch == '.' {
			if i_or_f {
				raise('invalid json: multiple dots in a number is not possible, near: ' + res);
			}
			i_or_f = true;
		}
		res += ch; ++i;
	}
	--i;
	return res;
};

let get_kw = fn(data, i = 0, end = -1) {
	if end == -1 { end = data.len(); }
	let res = '';
	while i < end {
		let ch = data[i];
		if (ch < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z') && (ch < '0' || ch > '9') { break; }
		res += ch; ++i;
	}
	--i;
	if res == 'null' { return tok_type.NIL; }
	elif res == 'true' { return tok_type.TRUE; }
	elif res == 'false' { return tok_type.FALSE; }
	raise('invalid json keyword: ' + res);
	return nil;
};

let expect = fn(toks, end, i, type) {
	if i >= end { raise('expected: ' + tok_type_strs[type] + ', found: EOF'); }
	if toks[i].type != type {
		raise('expected token at index ' + i.str() + ' to be of type: ' +
		      tok_type_strs[type] + ', found: ' + tok_type_strs[toks[i].type]);
	}
};

###########################################################################################
# JSON parser & helper functions
###########################################################################################

let parse = fn(toks, i = 0) {
	let sz = toks.len();
	if toks[i].type == tok_type.NIL { return nil; }
	elif toks[i].type == tok_type.INT { return toks[i].val.int(); }
	elif toks[i].type == tok_type.FLT { return toks[i].val.flt(10); }
	elif toks[i].type == tok_type.STR { return toks[i].val; }
	elif toks[i].type == tok_type.TRUE { return true; }
	elif toks[i].type == tok_type.FALSE { return false; }
	elif toks[i].type == tok_type.LBRACE {
		let m = map.new();
		++i; # now after lbrace
		parse_map(toks, sz, m, i);
		++i; # now after map value
		while toks[i].type == tok_type.COMMA {
			++i; # now after comma
			parse_map(toks, sz, m, i);
			++i; # now after map value
		}
		expect(toks, sz, i, tok_type.RBRACE);
		return m;
	} elif toks[i].type == tok_type.LBRACK {
		let v = vec.new();
		++i; # now after lbrack
		parse_vec(toks, sz, v, i);
		++i; # now after vec element
		while toks[i].type == tok_type.COMMA {
			++i; # now after comma
			parse_vec(toks, sz, v, i);
			++i; # now after vec element
		}
		expect(toks, sz, i, tok_type.RBRACK);
		return v;
	}
	return nil;
};

let parse_map = fn(toks, sz, m, i) {
	expect(toks, sz, i, tok_type.STR);
	let k = toks[i].val;
	++i;
	expect(toks, sz, i, tok_type.COLON);
	++i;
	let v = parse(toks, i);
	m.insert(k, v);
};

let parse_vec = fn(toks, sz, v, i) {
	let e = parse(toks, i);
	v.push(e);
};

###########################################################################################
# functions for converting to JSON, used by dumps()
###########################################################################################

let to_json in all_t = fn(indent = -1, indent_char = ' ') {
	return '';
};

let to_json in bool_t = fn(indent = -1, indent_char = ' ') {
	return self.str();
};

let to_json in flt_t = fn(indent = -1, indent_char = ' ') {
	return self.str();
};

let to_json in int_t = fn(indent = -1, indent_char = ' ') {
	return self.str();
};

let to_json in map_t = fn(indent = -1, indent_char = ' ') {
	let res = '{';
	if indent > -1 {
		++indent;
	}
	for e in self.each() {
		if indent > -1 { res += '\n' + indent_char * indent; }
		res += '"' + e.0 + '": ' + e.1.to_json(indent, indent_char) + ', ';
		if indent > -1 { res.pop(); }
	}
	if self.len() > 0 {
		res.pop();
		if indent > -1 {
			res += '\n';
		} else {
			res.pop();
		}
	}
	if indent > -1 {
		--indent;
		res += indent_char * indent;
	}
	res += '}';
	return res;
};

let to_json in nil_t = fn(indent = -1, indent_char = ' ') {
	return 'null';
};

let to_json in str_t = fn(indent = -1, indent_char = ' ') {
	return '"' + self + '"';
};

let to_json in vec_t = fn(indent = -1, indent_char = ' ') {
	let res = '[';
	if indent > -1 {
		++indent;
	}
	for e in self.each() {
		if indent > -1 { res += '\n' + indent_char * indent; }
		res += e.to_json(indent, indent_char) + ', ';
		if indent > -1 { res.pop(); }
	}
	if self.len() > 0 {
		res.pop();
		if indent > -1 {
			res += '\n';
		} else {
			res.pop();
		}
	}
	if indent > -1 {
		--indent;
		res += indent_char * indent;
	}
	res += ']';
	return res;
};