# by default, {stdclk,sysclk}_now() provide nanosecond resolution

mload('std/time');

let nano = 1.0; # equivalent to what *_now() provides
let micro = nano / 1000;
let milli = micro / 1000;
let second = milli / 1000;
let minute = second / 60;
let hour = minute / 60;

let resolution = micro; # set to micro by default
let date_format = '%a %b %e %T %Z %Y';

let set_resolution = fn(num) {
	resolution = num;
};

let now = fn() {
	return system_clock_now_native();
};

let resolve = fn(time, resol = nil) {
	let res = 0.0;
	if resol == nil {
		res = resolution;
	} else {
		res = resol;
	}
	return time.flt() * res;
};

let hours = fn(num) {
	return num.flt() / hour;
};

let mins = fn(num) {
	return num.flt() / minute;
};

let seconds = fn(num) {
	return num.flt() / second;
};

let set_format = fn(new_format) {
	date_format = new_format;
};

let format = fn(time, fmt = nil) {
	if fmt == nil {
		return format_native(time, date_format);
	}
	return format_native(time, fmt);
};