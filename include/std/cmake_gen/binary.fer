let fmt = import('std/fmt');
let vec = import('std/vec');
let lang = import('std/lang');
let find_lib = import('./find_lib');

let binary_base =
`# {self.bin_name} binary
set(mod "{self.bin_name}")
add_executable($\\{mod} "$\\{PROJECT_SOURCE_DIR}/{self.src_path}/{self.main_src}" {self.other_srcs})
target_link_libraries($\\{mod}{dep_names})
set_target_properties($\\{mod}
	PROPERTIES
	OUTPUT_NAME {self.bin_name}
	LINK_FLAGS "$\\{EXTRA_LD_FLAGS}"
	RUNTIME_OUTPUT_DIRECTORY "$\\{CMAKE_BINARY_DIR}/bin"
	INSTALL_RPATH_USE_LINK_PATH TRUE
)
install(TARGETS $\\{mod}
	RUNTIME
	  DESTINATION bin
	  COMPONENT Binaries
)`;

let binary_t = lang.struct(
	bin_name = 'sample_bin',
	other_srcs = '',
	deps = vec.new(refs = true),
	src_path = 'src',
	main_src = 'Main.cpp'
);

let new = fn(name) { return binary_t(bin_name = name); };

let add_src = fn(src) { self.other_srcs += ' ' + src; return self; };

let add_dep in binary_t = fn(dep) { self.deps.push(dep); return self; };
let set_src_path in binary_t = fn(path) { self.src_path = path; return self; };
let set_main_src in binary_t = fn(main_src) { self.main_src = main_src; return self; };

let gen in binary_t = fn() {
	let dep_names = ' ';
	for d in self.deps.each() {
		dep_names += d.name() + ' ';
	}
	dep_names.pop();
	return fmt.template(binary_base);
};