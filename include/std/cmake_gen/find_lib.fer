let io = import('std/io');
let os = import('std/os');
let vec = import('std/vec');
let str = import('std/str');
let fmt = import('std/fmt');
let lang = import('std/lang');

let find_lib_base =
`{extra}
find_library({self.var_name.upper()}_LIBRARY {self.lib_name} {self.path_suffixes} {self.required} {brew_prefix_path})
`;

let reqd_line_base =
`if(NOT {self.var_name.upper()}_LIBRARY)
	message(FATAL_ERROR "{self.var_name} is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
else()
	message("-- {self.var_name} found at: $\\{{self.var_name.upper()}_LIBRARY}")
endif()
`;

let find_lib_t = lang.struct(
	template = find_lib_base,
	lib_name = 'test',
	var_name = '',
	path_suffixes = '',
	required = '',
	use_homebrew = false,
	homebrew_name = ''
);

let new = fn(lib_name) { return find_lib_t(lib_name = lib_name); };

let make_reqd in find_lib_t = fn() {
	self.required = 'REQUIRED';
	self.template += reqd_line_base;
	return self;
};

let set_var_name in find_lib_t = fn(var_name) { self.var_name = var_name; return self; };

let add_path_suffix in find_lib_t = fn(path_suffix) { self.path_suffixes += path_suffix; return self; };

let name in find_lib_t = fn() {
	if !self.var_name.empty() {
		return '${' + self.var_name.upper() + '_LIBRARY}';
	}
	return '${' + self.lib_name.upper() + '_LIBRARY}';
};

let use_brew in find_lib_t = fn(homebrew_name = '') {
	self.use_homebrew = true;
	if !homebrew_name.empty() { self.homebrew_name = homebrew_name; }
	else { self.homebrew_name = self.lib_name; }
	return self;
};

let gen_brew_info in find_lib_t = fn(brew_prefix_path) {
	brew_prefix_path = '';
	if !self.use_homebrew || os.name != 'macos' { return false; }
	let brew = os.find_exec('brew');
	if brew.empty() {
		io.cprintln('{y}warn{0}: could not find \'brew\' in $PATH{0}');
		return false;
	}
	let out = vec.new();
	let res = os.exec(brew + ' --prefix ' + self.homebrew_name + ' 2>/dev/null', out);
	if res != 0 || out.empty() { return false; }
	brew_prefix_path = out[0];
	return true;
};

let gen in find_lib_t = fn() {
	if self.var_name == '' { self.var_name = self.lib_name; }
	if !self.path_suffixes.empty() { self.path_suffixes = 'PATH_SUFFIXES "' + self.path_suffixes + '"'; }
	let extra = '';
	let brew_prefix = '';
	let brew_prefix_path = '';
	if self.use_homebrew && os.name == 'macos' && self.gen_brew_info(brew_prefix) {
		extra = 'include_directories(' + brew_prefix + '/include)';
		brew_prefix_path = 'PATHS ' + brew_prefix + '/lib NO_DEFAULT_PATH';
	}
	return fmt.template(self.template);
};