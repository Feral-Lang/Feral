let template_base =
`cmake_minimum_required(VERSION {self.version})

project({self.proj_name} C CXX)

set(CMAKE_CXX_STANDARD {self.cxx_std})
if(CMAKE_VERSION VERSION_LESS "3.1")
	add_compile_options(-std=c++{self.cxx_std})
endif()

set(CMAKE_INSTALL_PREFIX "{self.prefix}")
set(CMAKE_PREFIX_PATH "$\\{CMAKE_INSTALL_PREFIX};$\\{CMAKE_BINARY_DIR}")
include_directories($\\{CMAKE_INSTALL_PREFIX}/include)
add_definitions(-DINSTALL_PREFIX=$\\{CMAKE_INSTALL_PREFIX})
message("-- Using PREFIX = $\\{CMAKE_INSTALL_PREFIX}")

if(DEFINED ENV\\{MEM_PROFILE})
	message("-- Memory Pool profiling is true")
	add_definitions(-DMEM_PROFILE)
endif()

# add cmake_modules path
list(APPEND CMAKE_MODULE_PATH "$\\{PROJECT_SOURCE_DIR}/include/Extra/cmake_modules"
			      "{sys.install_prefix}/include/feral/Extra/cmake_modules")

set(FERAL_VERSION_MAJOR {sys.version_major})
set(FERAL_VERSION_MINOR {sys.version_minor})
set(FERAL_VERSION_PATCH {sys.version_patch})

execute_process(COMMAND date "+%a %b %d, %Y at %H:%M:%S" OUTPUT_VARIABLE BUILD_DATE OUTPUT_STRIP_TRAILING_WHITESPACE)

set(ORIGIN "$ORIGIN")
if(APPLE)
	set(ORIGIN "@loader_path")
endif()
set(CMAKE_INSTALL_RPATH "$\\{ORIGIN}/{self.rpath_from_origin}lib/feral;$\\{ORIGIN}/.")
set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR TRUE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_MACOSX_RPATH TRUE)

include(CheckCXXCompilerFlag)

# For libGMP on macOS and BSD
if(APPLE OR $\\{CMAKE_SYSTEM_NAME} MATCHES ".*BSD.*")
	include_directories(/usr/local/include)
endif()

# Dependencies

find_library(GMP_LIBRARY gmp REQUIRED)
if(NOT GMP_LIBRARY)
	message(FATAL_ERROR "gmp is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
endif()

find_library(MPFR_LIBRARY mpfr REQUIRED)
if(NOT MPFR_LIBRARY)
	message(FATAL_ERROR "mpfr is required but missing, looked in: $\\{INCLUDE_INSTALL_DIR}")
endif()

{deps_str}

set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
	message("-- Using thread flags: -pthread")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} -pthread")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} -pthread")
else()
	message("-- Using thread flags: $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_CXX_FLAGS  "$\\{CMAKE_CXX_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
	set(CMAKE_EXE_LINKER_FLAGS  "$\\{CMAKE_EXE_LINKER_FLAGS} $\\{CMAKE_THREAD_LIBS_INIT}")
endif()

find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "$\\{CCACHE_PROGRAM}")
    message("-- Using ccache")
endif()

if($\\{CMAKE_SYSTEM_NAME} MATCHES ".*BSD.*")
	add_definitions(-D_WITH_GETLINE)
endif()

if("$\\{CMAKE_BUILD_TYPE}" STREQUAL "Debug")
	add_definitions(-DDEBUG_MODE)
	message("-- Running in debug mode")
endif()

check_cxx_compiler_flag(-march=native COMPILER_SUPPORTS_MARCH_NATIVE)
if(COMPILER_SUPPORTS_MARCH_NATIVE)
	set(CMAKE_CXX_FLAGS "$\\{CMAKE_CXX_FLAGS} -march=native")
endif()

# Because Android has issues with dlopen()'s RTLD_GLOBAL; See:
# https://android.googlesource.com/platform/bionic/+/master/android-changes-for-ndk-developers.md#changes-to-library-search-order
# https://android.googlesource.com/platform/bionic/+/30b17e32f0b403a97cef7c4d1fcab471fa316340/linker/linker_namespaces.cpp#100
# https://android-ndk.narkive.com/iNWj05IV/weak-symbol-linking-when-loading-dynamic-libraries
set(EXTRA_LD_FLAGS "")
if(ANDROID)
	set(EXTRA_LD_FLAGS "-z global")
endif()

# Finally! The sources!!!!!

# Install {self.proj_name} headers
install(DIRECTORY "$\\{CMAKE_SOURCE_DIR}/include/"
	DESTINATION "$\\{CMAKE_INSTALL_PREFIX}/include/feral/{self.proj_name}"
)

{installs_str}

# Libraries

{shared_libs_str}

# Binaries

{binaries_str}`;
