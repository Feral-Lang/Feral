let io = import('std/io');
let map = import('std/map');
let vec = import('std/vec');
let str = import('std/str');
let lang = import('std/lang');

###################################################################################################
# API
###################################################################################################

let loads = fn(data) {
	let toks = Tokenize(data);
	return Parse(toks, toks.len());
};

let dumps = fn(obj, indent = -1, indent_char = ' ') {
	let res = obj.feclString(indent, indent_char, true);
	if res.empty() {
		raise('type ' + obj._typestr_() + ' does not implement FeCL serialization');
	}
	res.trim();
	return res;
};

###################################################################################################
# Token Type
###################################################################################################

let TokType = lang.enum(
	.INVALID,

	.INT,
	.FLT,
	.STR,
	.IDEN,

	.ASSN,
	.COLS, # semicolon
	.COMMA,

	.LBRACE,
	.RBRACE,
	.LBRACK,
	.RBRACK
);

let TokStr = vec.new(
	'invalid',

	'int',
	'float',
	'string',
	'identifier',

	'=',
	';',
	',',

	'{',
	'}',
	'[',
	']'
);

###################################################################################################
# Token
###################################################################################################

let Tok = lang.struct(
	type = 0, # one of TokType
	data = ''
);
Tok.set_typename('Tok');

let setType in Tok = fn(type) {
	self.type = type;
};

let setData in Tok = fn(data) {
	self.data = data;
};

let isType in Tok = fn(type) { return self.type == type; };

let Toks = lang.struct(
	toks = vec.new(),
	invalid = Tok(TokType.INVALID)
);
Toks.set_typename('Toks');

let push in Toks = fn(data) {
	self.toks.push(data);
};

let len in Toks = fn() { return self.toks.len(); };

let getData in Toks = fn(idx) {
	if idx >= self.toks.len() { return self.invalid.data; }
	return self.toks[idx].data;
};

let getType in Toks = fn(idx) {
	if idx >= self.toks.len() { return TokType.INVALID; }
	return self.toks[idx].type;
};

###################################################################################################
# Lexer
###################################################################################################

let Tokenize = fn(data) {
	let toks = Toks();
	let len = data.len();
	let comment = false;
	for let i = 0; i < len; ++i {
		if comment {
			if data[i] == '\n' { comment = false; }
			continue;
		}
		if data[i] == '\'' || data[i] == '"' {
			let s = GetConstStr(data, i, len);
			toks.push(Tok(TokType.STR, s));
			continue;
		}
		if data.ischat(i, '\n\t ') { continue; }
		if data[i] == '=' { toks.push(Tok(TokType.ASSN)); continue; }
		if data[i] == ';' { toks.push(Tok(TokType.COLS)); continue; }
		if data[i] == ',' { toks.push(Tok(TokType.COMMA)); continue; }
		if data[i] == '[' { toks.push(Tok(TokType.LBRACK)); continue; }
		if data[i] == ']' { toks.push(Tok(TokType.RBRACK)); continue; }
		if data[i] == '{' { toks.push(Tok(TokType.LBRACE)); continue; }
		if data[i] == '}' { toks.push(Tok(TokType.RBRACE)); continue; }
		if data[i] == '-' || data[i].is_digit() {
			let intflt = false; # false => int
			let num = '';
			if data[i] == '-' { num += data[i]; ++i; }
			num += GetNum(data, intflt, i, len);
			if intflt { toks.push(Tok(TokType.FLT, num)); }
			else { toks.push(Tok(TokType.INT, num)); }
			continue;
		}
		if data[i].is_alpha() || data[i] == '_' {
			let iden = GetIden(data, i, len);
			toks.push(Tok(TokType.IDEN, iden));
			continue;
		}
		if data[i] == '#' {
			comment = true;
			continue;
		}
		raise('invalid character encountered: ' + data[i]);
	}
	return toks;
};

let GetConstStr = fn(data, i, end) {
	let start = data[i++];
	let res = '';
	let found = false;
	let cont_backslash = 0;
	while i < end {
		if data[i] == '\\' {
			++cont_backslash;
			res += data[i++];
			continue;
		}
		if data[i] == start && cont_backslash % 2 == 0 {
			found = true;
			break;
		}
		res += data[i++];
		cont_backslash = 0;
	}
	if !found {
		raise('invalid FeCL: no end quotes for data near: ' + res);
	}
	# i is now at end quote
	return res;
};

let GetNum = fn(data, intflt, i, end) {
	let res = '';
	while i < end {
		let ch = data[i];
		if (ch < '0' || ch > '9') && ch != '.' { break; }
		if ch == '.' {
			if intflt {
				raise('invalid FeCL: multiple dots in a number is not possible, near: ' + res);
			}
			intflt = true;
		}
		res += ch; ++i;
	}
	--i;
	return res;
};

let GetIden = fn(data, i, end) {
	let res = '';
	while i < end {
		let ch = data[i];
		if !ch.is_alpha() && !ch.is_digit() && ch != '_' { break; }
		res += ch; ++i;
	}
	return res;
};

###################################################################################################
# Parser
###################################################################################################

let Parse = fn(toks, sz, i = 0) {
	let m = map.new();
	while i < sz {
		expect(toks, sz, i, TokType.IDEN);
		let var = toks.getData(i);
		++i;
		expect(toks, sz, i, TokType.ASSN);
		++i;
		let val = ParseInternal(toks, sz, i);
		++i;
		expect(toks, sz, i, TokType.COLS);
		++i;
		m.insert(var, val);
	}
	return m;
};

let ParseInternal = fn(toks, sz, i) {
	if toks.getType(i) == TokType.LBRACE {
		++i;
		expect(toks, sz, i, TokType.IDEN);
		let m = map.new();
		while toks.getType(i) == TokType.IDEN {
			let var = toks.getData(i);
			++i;
			expect(toks, sz, i, TokType.ASSN);
			++i;
			let val = ParseInternal(toks, sz, i);
			++i;
			expect(toks, sz, i, TokType.COLS);
			++i;
			m.insert(var, val);
		}
		expect(toks, sz, i, TokType.RBRACE);
		return m;
	}
	if toks.getType(i) == TokType.LBRACK {
		++i;
		let v = vec.new();
		while true {
			let val = ParseInternal(toks, sz, i);
			++i;
			v.push(val);
			if toks.getType(i) == TokType.COMMA {
				++i;
				continue;
			}
			expect(toks, sz, i, TokType.RBRACK);
			break;
		}
		return v;
	}
	if toks.getType(i) == TokType.STR { return toks.getData(i); }
	if toks.getType(i) == TokType.INT { return toks.getData(i).int(); }
	if toks.getType(i) == TokType.FLT { return toks.getData(i).flt(10); }

	raise('invalid token: ' + TokStr[toks.getType(i)]);
};

let expect = fn(toks, end, i, type) {
	if i >= end { raise('expected: ' + TokStr[type] + ', found: EOF'); }
	if toks.getType(i) != type {
		raise('expected token at index ' + i.str() + ' to be of type: ' +
		      TokStr[type] + ', found: ' + TokStr[toks.getType(i)]);
	}
};

###########################################################################################
# functions for converting from FeCL to string, used by dumps()
###########################################################################################

let feclString in all_t = fn(indent = -1, indent_char = ' ', top = false) {
	return '';
};

let feclString in nil_t = fn(indent = -1, indent_char = ' ', top = false) {
	return 'nil';
};

let feclString in bool_t = fn(indent = -1, indent_char = ' ', top = false) {
	return self.str();
};

let feclString in flt_t = fn(indent = -1, indent_char = ' ', top = false) {
	return self.str();
};

let feclString in int_t = fn(indent = -1, indent_char = ' ', top = false) {
	return self.str();
};

let feclString in str_t = fn(indent = -1, indent_char = ' ', top = false) {
	return '\'' + self + '\'';
};

let feclString in map_t = fn(indent = -1, indent_char = ' ', top = false) {
	let res = '';
	if !top {
		res += '{';
	}
	if indent > -1 && !top {
		++indent;
	}
	let len = self.len();
	for e in self.each() {
		if indent > -1 {
			res += '\n';
			if !top { res += indent_char * indent; }
		}
		res += e.0 + ' = ' + e.1.feclString(indent, indent_char) + ';';
		if indent < 0 { res += ' '; }
	}
	if self.len() > 0 {
		if indent > -1 {
			res += '\n';
		} else {
			res.pop();
		}
	}
	if indent > -1 && !top {
		--indent;
		res += indent_char * indent;
	}
	if !top {
		res += '}';
	}
	return res;
};

let feclString in vec_t = fn(indent = -1, indent_char = ' ', top = false) {
	let res = '[';
	if indent > -1 {
		++indent;
	}
	for e in self.each() {
		if indent > -1 { res += '\n' + indent_char * indent; }
		res += e.feclString(indent, indent_char) + ',';
		if indent < 0 { res += ' '; }
	}
	if self.len() > 0 {
		res.pop();
		if indent > -1 {
			res += '\n';
		} else {
			res.pop();
		}
	}
	if indent > -1 {
		--indent;
		res += indent_char * indent;
	}
	res += ']';
	return res;
};