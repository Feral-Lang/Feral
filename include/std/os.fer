mload('std/os');

let fs = import('std/fs');
let str = import('std/str');
let vec = import('std/vec');
# stat function here
let stat = import('std/stat').stat;

let set_env = fn(var, val, overwrite = false) {
	return set_env_native(var, val, overwrite);
};

# OS name, current possible values:
# android
# linux
# macos
# bsd
let name = os_get_name_native();

# execute command, optionally get output in second argument
# if it is a vector
let exec = fn(cmd, out = nil) {
	return exec_native(cmd, out);
};

# find the given file (exec) in the PATH variables
# return the entire file path if found, empty string if not
let find_exec = fn(exec) {
	for dir in get_env('PATH').split().each() {
		if fs.exists(dir + '/' + exec) { return dir + '/' + exec; }
	}
	return '';
};

# chmod command wrapper
let chmod = fn(dest, mode = '0755', recurse = true) {
	return chmod_native(dest, mode, recurse);
};