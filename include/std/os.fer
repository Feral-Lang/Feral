mload('std/os');

let fs = import('std/fs');
let str = import('std/str');
let vec = import('std/vec');

let set_env = fn(var, val, overwrite = false) {
	return set_env_native(var, val, overwrite);
};

# OS name, current possible values:
# android
# linux
# macos
# bsd
let name = os_get_name_native();

# execute command, optionally get output in second argument
# if it is a vector
let exec = fn(cmd, out = nil) {
	return exec_native(cmd, out);
};

# find the given file (exec) in the PATH variables
# return the entire file path if found, empty string if not
let find_exec = fn(exec) {
	for dir in get_env('PATH').split().each() {
		if fs.exists(dir + '/' + exec) { return dir + '/' + exec; }
	}
	return '';
};

# chmod command wrapper
let chmod = fn(dest, mode = '0755', recurse = true) {
	return chmod_native(dest, mode, recurse);
};

# show a notification
let notify = fn(title, body = '') {
	title = '"' + title + '"';
	if !body.empty() { body = '"' + body + '"'; }
	let cmd = '';
	if name == 'linux' {
		let notify = find_exec('notify-send');
		if notify.empty() {
			raise('notification requires notify-send on Linux (could not find in $PATH)');
		}
		cmd = notify + ' -u normal -t 5000 ' + title + ' ' + body;
	} elif name == 'macos' {
		let notify = find_exec('osascript');
		if notify.empty() {
			raise('notification requires osascript on macOS (could not find in $PATH)');
		}
		if body.empty() {
			cmd = notify + ' -e \'display notification ' + title + '\'';
		} else {
			cmd = notify + ' -e \'display notification ' + body + ' with title ' + title + '\'';
		}
	} elif name == 'android' {
		let notify = find_exec('termux-notification');
		if notify.empty() {
			raise('notification requires termux-notification on Android (could not find in $PATH)');
		}
		cmd = notify + ' --title ' + title;
		if !body.empty() {
			cmd += ' --content ' + body;
		}
	} else {
		raise('notifications unimplemented for this OS');
	}
	exec(cmd);
};