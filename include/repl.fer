let io = import('std/io');
let str = import('std/str');
let vec = import('std/vec');
let term = import('std/term');

let printflush = fn(d0, data...) {
	io.print(d0, data...);
	io.fflush(io.stdout);
};

let printlnflush = fn(data...) {
	io.println(data...);
	io.fflush(io.stdout);
};

io.println('starting repl ', term.fd_stdin);
term.set_attrs(term.fd_stdin, term.attrs_raw);
io.println('running repl\r');

let lines = vec.new();
let line = '';
let ch = '';
let curr_line = 0;
printflush('>> ');
while io.readch(term.fd_stdin, ch) > 0 {
	#io.println(ch.byt(), '\r');
	# escape sequence
	if ch == '[' {
		if io.readch(term.fd_stdin, ch) < 1 { break; }
		# up
		if ch == 'A' && curr_line > 0 {
			io.print('\b \b' * line.len());
			line = lines[curr_line--];
		} elif ch == 'B' && curr_line < lines.len() - 1 {
			io.print('\b \b' * line.len());
			line = lines[curr_line++];
		}
		printflush('\r>> ', line);
		continue;
	}
	# enter/carriage return
	if ch.byt() == 13 {
		if line.len() > 0 {
			lines.push(line);
			curr_line = lines.len() - 1;
		}
		io.println('\r');
		printflush('>> ');
		continue;
	}
	if ch == 'q' {
		printlnflush('\r');
		break;
	}
	line += ch;
	printflush(ch);
}

term.set_attrs(term.fd_stdin, term.attrs_orig);