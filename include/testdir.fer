# executes all '.fer' files in a given directory
# ensures they all exit with return code zero

let io = import('std/io');
let fs = import('std/fs');
let os = import('std/os');
let mp = import('std/multiproc');
let vec = import('std/vec');
let sys = import('std/sys');
let stat = import('std/stat');

if sys.args.empty() {
	io.println('Usage: ', sys.self_bin, ' ', __SRC_PATH__, ' <directory>');
	sys.exit(1);
}

let st = stat.stat(sys.args[0]) or err {
	io.println('error: stat failed on directory: ', os.strerr(err));
	sys.exit(1);
	nil # unreachable
};

if !st.isdir() {
	io.println('error: entered path is not a directory');
	sys.exit(1);
}

let files = fs.walkdir(sys.args[0], fs.WALK_RECURSE, '(.*)\\.fer');
let passed = 0, failed = 0;
let tpool = vec.new(refs = true);
let max_procs = mp.nproc();

let wait_procs = fn(max_procs, with_valgrind) {
	while tpool.len() >= max_procs {
		for let i = 0; i < tpool.len(); ++i {
			if !tpool[i].done() { continue; }
			let t = tpool[i];
			if t.res() != 0 {
				++failed;
				if with_valgrind {
					io.cprintln('{r}failed {y}', files[ t.id() ], '{c} with valgrind{0}, {y}code{0}: {r}', t.res(),'{0}');
				} else {
					io.cprintln('{r}failed {y}', files[ t.id() ], '{0}, {y}code{0}: {r}', t.res(),'{0}');
				}
				io.fflush(io.stdout);
			} else {
				++passed;
			}
			tpool.erase(i--);
		}
	}
};

let valgrind = '';
if sys.args.find('--valgrind') {
	valgrind = os.find_exec('valgrind');
	if valgrind.empty() {
		io.cprintln('could {r}not{0} find valgrind in {y}$PATH{0}');
		sys.exit(1);
	}
	# --log-fd=1 to pour the valgrind output on stdout so that we
	# don't have to redirect entire stderr to /dev/null
	valgrind += ' --log-fd=1 ';
}

for file in files.each() {
	wait_procs(max_procs, !valgrind.empty());
	io.cprintln('{c}test{0}: {y}', file, '{0} ...');
	io.fflush(io.stdout);
	tpool.push(mp.new(valgrind + sys.self_bin + ' ' + file + ' >/dev/null'));
}
wait_procs(1, !valgrind.empty());

io.cprintln('total: {y}', files.len(),
	    '{0}, passed: {g}', passed,
	    '{0}, failed: {r}', failed, '{0}');
sys.exit(failed);