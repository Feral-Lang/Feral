# this program is a simple producer-consumer program in which
# the producer and consumer functions are ran in independent threads
# and the data is a shared vector of numbers (v).
# it uses mutex (mtx) to ensure the vector isn't corrupted.

let io = import('std/io');
let rng = import('std/rng');
let vec = import('std/vec');
let mutex = import('std/mutex');
let threads = import('std/threads');

let prod_fn = fn(v, mtx) {
	let i = 0;
	while true {
		mtx.lock();
		if v.len() > 50 { mtx.unlock(); continue; } # we don't want a backlog of more than 50 for production
		v.push(rng.get(1, 1000));
		io.println('produced ', i++, ' data: ', v.back());
		mtx.unlock();
	}
};

let cons_fn = fn(v, mtx) {
	let i = 0;
	while true {
		mtx.lock();
		if v.empty() { mtx.unlock(); continue; }
		io.println('consuming ', i++, ' data: ', v.back());
		v.pop();
		mtx.unlock();
	}
};

let prod = threads.new(prod_fn);
let cons = threads.new(cons_fn);

let v = vec.new();
let mtx = mutex.new();
prod.start(v, mtx); # starts production thread in background
cons.start(v, mtx); # starts consumption thread in background

prod.join();
cons.join();