# This program finds all possible combinations of numbers (p, q, ...)
# such that, with the numbers in a given vector (v.a, v.b ...)
# the following equation exists:
# v.a * p + v.b * q + v.c * r + v.d * s = RHS
# where RHS is also a given number

let io = import('std/io');
let vec = import('std/vec');

let v = vec.new(7, 5, 3, 1);

let answers = vec.new();

let rhs = 8;

let recurse = fn(v, total, currvec) {
	let item = v.front();
	for let i = 0; i <= rhs; ++i {
		let res = i * item + total;
		if res > rhs { return; }
		if v.len() == 1 {
			if res == rhs {
				currvec.push(i);
				answers.push(currvec);
				currvec.pop();
				continue;
			}
			if res < rhs { continue; }
		}
		let newv = v;
		newv.erase(0);
		currvec.push(i);
		recurse(newv, res, currvec);
		currvec.pop();
	}
};

recurse(v, 0, vec.new());
io.println(answers);
